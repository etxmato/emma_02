
<html>
<title>Chip-8, 8X, ETI & Elf Syntax</title>
<body>
<h1>Chip-8, 8X, ETI & Elf Syntax</h1>
<p>
This info is also available online on the <a href="https://emma02.hobby-site.com/pseudo_chip8.html">Emma 02 site</a>.
</p>
<h2>Definitions</h2>
<table>
<TR>
<TD WIDTH="70">aaa</TD>
<TD WIDTH="400">12 bit address</TD>
</TR>
<TR>
<TD WIDTH="70">kk</TD>
<TD WIDTH="400">8 bit constant</TD>
</TR>
<TR>
<TD WIDTH="70">n</TD>
<TD WIDTH="400">4 bit constant</TD>
</TR>
<TR>
<TD WIDTH="70">x</TD>
<TD WIDTH="400">Register number Vx (x = 0 to F)</TD>
</TR>
<TR>
<TD WIDTH="70">y</TD>
<TD WIDTH="400">Register number Vy (y = 0 to F)</TD>
</TR>
<TR>
<TD WIDTH="70">I</TD>
<TD WIDTH="400">Register I (12 bit)</TD>
</TR>
<TR>
<TD WIDTH="70">[I]</TD>
<TD WIDTH="400">Memory value of address in register I</TD>
</TR>
<TR>
<TD WIDTH="70">NH</TD>
<TD WIDTH="400">Bit 0-3 Horizontal Location<BR>Bit 4-7, Horizontal width</TD>
</TR>
<TR>
<TD WIDTH="70">NV</TD>
<TD WIDTH="400">Bit 0-3 Vertical Location<BR>Bit 4-7, Vertical height</TD>
</TR>
<TR>
<TD WIDTH="70">1..9, A..F</TD>
<TD WIDTH="400">Hexadecimal digits</TD>
</TR>
</table>
<h2>Chip-8 Syntax</h2>
<table>
<TR>
<TD WIDTH="55">Fx1E</TD>
<TD WIDTH="40">ADD</TD>
<TD WIDTH="100">I, Vx</TD>
<TD WIDTH="250">I = I + Vx</TD>
</TR>
<TR>
<TD WIDTH="55">7xkk</TD>
<TD WIDTH="40">ADD</TD>
<TD WIDTH="100">Vx, kk</TD>
<TD WIDTH="250">Vx = Vx + kk</TD>
</TR>
<TR>
<TD WIDTH="55">8xy4</TD>
<TD WIDTH="40">ADD</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx + Vy, VF = carry</TD>
</TR>
<TR>
<TD WIDTH="55">8xy2</TD>
<TD WIDTH="40">AND</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx AND Vy, VF undefined</TD>
</TR>
<TR>
<TD WIDTH="55">2aaa</TD>
<TD WIDTH="40">CALL</TD>
<TD WIDTH="100">aaa</TD>
<TD WIDTH="250">Call subroutine at aaa (16 levels)</TD>
</TR>
<TR>
<TD WIDTH="55">00E0</TD>
<TD WIDTH="40">CLS</TD>
<TD WIDTH="100"></TD>
<TD WIDTH="250">Clear display</TD>
</TR>
<TR>
<TD WIDTH="55">Dxyn</TD>
<TD WIDTH="40">DRW</TD>
<TD WIDTH="100">Vx, Vy, n</TD>
<TD WIDTH="250">Draw n byte sprite stored at [I] at Vx, Vy. Set VF = collision</TD>
</TR>
<TR>
<TD WIDTH="55">1aaa</TD>
<TD WIDTH="40">JP</TD>
<TD WIDTH="100">aaa</TD>
<TD WIDTH="250">Jump to address aaa</TD>
</TR>
<TR>
<TD WIDTH="55">Baaa</TD>
<TD WIDTH="40">JP</TD>
<TD WIDTH="100">V0, aaa</TD>
<TD WIDTH="250">Jump to address aaa + V0</TD>
</TR>
<TR>
<TD WIDTH="55">Fx33</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">B, Vx</TD>
<TD WIDTH="250">Store BCD value of Vx in [I], [I+1], [I+2]</TD>
</TR>
<TR>
<TD WIDTH="55">Fx15</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">DT, Vx</TD>
<TD WIDTH="250">Delay timer = Vx</TD>
</TR>
<TR>
<TD WIDTH="55">Fx29</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">F, Vx</TD>
<TD WIDTH="250">Point I to 5 byte numeric sprite for value in Vx</TD>
</TR>
<TR>
<TD WIDTH="55">Aaaa</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">I, aaa</TD>
<TD WIDTH="250">I = aaa</TD>
</TR>
<TR>
<TD WIDTH="55">Fx18</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">ST, Vx</TD>
<TD WIDTH="250">Soundtimer = Vx</TD>
</TR>
<TR>
<TD WIDTH="55">Fx07</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, DT</TD>
<TD WIDTH="250">Vx = Delay timer</TD>
</TR>
<TR>
<TD WIDTH="55">Fx0A</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, K</TD>
<TD WIDTH="250">Vx = key, wait for keypress</TD>
</TR>
<TR>
<TD WIDTH="55">6xkk</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, kk</TD>
<TD WIDTH="250">Vx = kk</TD>
</TR>
<TR>
<TD WIDTH="55">8xy0</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vy, VF undefined</TD>
</TR>
<TR>
<TD WIDTH="55">Fx65</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, [I]</TD>
<TD WIDTH="250">Read V0 .. Vx from [I] .. [I+x]</TD>
</TR>
<TR>
<TD WIDTH="55">Fx55</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">[I], Vx</TD>
<TD WIDTH="250">Store V0 .. Vx in [I] .. [I+x]</TD>
</TR>
<TR>
<TD WIDTH="55">8xy1</TD>
<TD WIDTH="40">OR</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx OR Vy, VF undefined</TD>
</TR>
<TR>
<TD WIDTH="55">00EE</TD>
<TD WIDTH="40">RETURN</TD>
<TD WIDTH="100"></TD>
<TD WIDTH="250">Return from subroutine (16 levels)</TD>
</TR>
<TR>
<TD WIDTH="55">Cxkk</TD>
<TD WIDTH="40">RND</TD>
<TD WIDTH="100">Vx , kk</TD>
<TD WIDTH="250">Vx = random AND kk</TD>
</TR>
<TR>
<TD WIDTH="55">3xkk</TD>
<TD WIDTH="40">SE</TD>
<TD WIDTH="100">Vx , kk</TD>
<TD WIDTH="250">Skip next instruction if Vx == kk</TD>
</TR>
<TR>
<TD WIDTH="55">5xy0</TD>
<TD WIDTH="40">SE</TD>
<TD WIDTH="100">Vx , Vy</TD>
<TD WIDTH="250">Skip next instruction if Vx == Vy</TD>
</TR>
<TR>
<TD WIDTH="55">8xxE</TD>
<TD WIDTH="40">SHL</TD>
<TD WIDTH="100">Vx</TD>
<TD WIDTH="250">Vx = Vx &lt;&lt; 1, VF = carry</TD>
</TR>
<TR>
<TD WIDTH="55">8xyE</TD>
<TD WIDTH="40">SHL</TD>
<TD WIDTH="100">Vx , Vy</TD>
<TD WIDTH="250">Vx = Vy &lt;&lt; 1, VF = carry</TD>
</TR>
<TR>
<TD WIDTH="55">8xx6</TD>
<TD WIDTH="40">SHR</TD>
<TD WIDTH="100">Vx</TD>
<TD WIDTH="250">Vx = Vx &gt;&gt; 1, VF = carry</TD>
</TR>
<TR>
<TD WIDTH="55">8xy6</TD>
<TD WIDTH="40">SHR</TD>
<TD WIDTH="100">Vx , Vy</TD>
<TD WIDTH="250">Vx = Vy &gt;&gt; 1, VF = carry</TD>
</TR>
<TR>
<TD WIDTH="55">Ex9E</TD>
<TD WIDTH="40">SKP</TD>
<TD WIDTH="100">Vx</TD>
<TD WIDTH="250">Skip next instruction if key Vx down</TD>
</TR>
<TR>
<TD WIDTH="55">ExA1</TD>
<TD WIDTH="40">SKNP</TD>
<TD WIDTH="100">Vx</TD>
<TD WIDTH="250">Skip next instruction if key Vx up</TD>
</TR>
<TR>
<TD WIDTH="55">4xkk</TD>
<TD WIDTH="40">SNE</TD>
<TD WIDTH="100">Vx, kk</TD>
<TD WIDTH="250">Skip next instruction if Vx != kk</TD>
</TR>
<TR>
<TD WIDTH="55">9xy0</TD>
<TD WIDTH="40">SNE</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Skip next instruction if Vx != Vy</TD>
</TR>
<TR>
<TD WIDTH="55">8xy5</TD>
<TD WIDTH="40">SUB</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx - Vy, VF = !borrow</TD>
</TR>
<TR>
<TD WIDTH="55">8xy7</TD>
<TD WIDTH="40">SUBN</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vy - Vx, VF = !borrow</TD>
</TR>
<TR>
<TD WIDTH="55">0aaa</TD>
<TD WIDTH="40">SYS</TD>
<TD WIDTH="100">aaa</TD>
<TD WIDTH="250">Call CDP1802 code at aaa</TD>
</TR>
<TR>
<TD WIDTH="55">8xy3</TD>
<TD WIDTH="40">XOR</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx XOR Vy, VF undefined</TD>
</TR>
</table>
<h2>Chip-8X Syntax</h2>
All of the instruction from Chip-8, except 'Baaa: JP V0, aaa' are valid for Chip-8X. Chip-8X offers the following additional instructions:
<table>
<TR>
<TD WIDTH="55">5xy1</TD>
<TD WIDTH="40">ADD8</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx + Vy (hex digits 00 to 77, mainly for manipulating the NH and NV parameters)</TD>
</TR>
<TR>
<TD WIDTH="55">02A0</TD>
<TD WIDTH="40">CLR</TD>
<TD WIDTH="100">B<BR>BACK</TD>
<TD WIDTH="250">Step background 1 colour (-> blue, -> black, -> green, -> red ->)</TD>
</TR>
<TR>
<TD WIDTH="55">Bxy0</TD>
<TD WIDTH="40">CLR<BR>CLRL</TD>
<TD WIDTH="100">Vx, Vy<BR>Vx/Vz, Vy</TD>
<TD WIDTH="250">Set Vy colour @ Vx (NH), Vz (Vz has to be V(x+1)) (NV)</TD>
</TR>
<TR>
<TD WIDTH="55">Bxyn</TD>
<TD WIDTH="40">CLR<BR>CLRH</TD>
<TD WIDTH="100">Vx, Vy, n<BR>Vx/Vz, Vy, n</TD>
<TD WIDTH="250">Set Vy colour @ Vx, Vz (Vz has to be V(x+1)) byte, n bytes vertically, n != 0</TD>
</TR>
<TR>
<TD WIDTH="55">FxFB</TD>
<TD WIDTH="40">INP1</TD>
<TD WIDTH="100">Vx</TD>
<TD WIDTH="250">Input port 1 to Vx (waits for EF4=1)</TD>
</TR>
<TR>
<TD WIDTH="55">FxF8</TD>
<TD WIDTH="40">OUT3</TD>
<TD WIDTH="100">Vx</TD>
<TD WIDTH="250">Vx to output port 3 (used for simple sound)</TD>
</TR>
<TR>
<TD WIDTH="55">ExF2</TD>
<TD WIDTH="40">SKP2</TD>
<TD WIDTH="100">Vx</TD>
<TD WIDTH="250">Skip next instruction if key Vx on keypad 2 is down</TD>
</TR>
<TR>
<TD WIDTH="55">ExF5</TD>
<TD WIDTH="40">SKNP2</TD>
<TD WIDTH="100">Vx</TD>
<TD WIDTH="250">Skip next instruction if key Vx on keypad 2 is up</TD>
</TR>
</table>
<h2>ETI-660 Chip-8 Syntax</h2>
All of the instruction from Chip-8 are valid for the TI-660 Chip-8 variant and also offers the following additional instruction:
<table>
<TR>
<TD WIDTH="55">Fx00</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">P, Vx</TD>
<TD WIDTH="250">Set the pitch (frequency) of the tone generator (beeper) to Vx</TD>
</TR>
<h2>Elf Chip-8 Syntax</h2>
All of the instruction from Chip-8 are valid for the Elf Chip-8 variant and also offers the following additional instruction:
<table>
<TR>
<TD WIDTH="55">Fx75</TD>
<TD WIDTH="40">OUT4</TD>
<TD WIDTH="100">Vx</TD>
<TD WIDTH="250">OUT 4 with Vx</TD>
</TR>
</table>
</body>
</html>

