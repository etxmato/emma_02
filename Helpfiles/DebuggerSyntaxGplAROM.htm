
<html>
<title>GPL-A (2K ROM) Syntax</title>
<body>
<h1>GPL-A (2K ROM) Syntax</h1>
<h2>Information</h2>
<p>
I expect GPL-A stands for Game Programming Language, version A.
</p>
<p>
GPL-A (2K ROM) is used in the gamed 'Tag-Bowling' and 'Katch' running on the RCA Video Coin Arcade machine (and FRED 1.5). Katch looks like an early version of Tag-Bowling.
</p>
<p>
The two GPL-A versions described here are very similar, obviously the 2K RAM version will fit into that whereas the 2K ROM version will need RAM located at hex 800-9FF as it uses screen location hex 900-9FF and V0-F are stored on hex 880-88F. Interrupt routines are different and they have slightly different code for the timers. Command syntax is more or less the same for both with differences in:
<UL>
<LI>SUB Vz, Vy-Vx on GPL 1 and SUB Vz, Vx-Vy on GPL 2
<LI>SE Vx, [6aa] on GPL 1 and SNE Vx, kk on GPL 2
<LI>SNE Vx, [6aa] on GPL 1 and SNE Vx, [8aa] on GPL 2
<LI>LD [6aa], Vx on GPL 1 and LD [8aa], Vx on GPL 2
</UL>
</p>
<p>
This info is also available online on the <a href="https://emma02.hobby-site.com/pseudo_gpl-a_rom.html">Emma 02 site</a>.
</p>
<h2>Definitions</h2>
<table>
<TR>
<TD WIDTH="70">aaa</TD>
<TD WIDTH="400">12 bit address</TD>
</TR>
<TR>
<TD WIDTH="70">kk</TD>
<TD WIDTH="400">8 bit constant</TD>
</TR>
<TR>
<TD WIDTH="70">d</TD>
<TD WIDTH="400">4 bit constant</TD>
</TR>
<TR>
<TD WIDTH="70">n</TD>
<TD WIDTH="400">4 bit constant</TD>
</TR>
<TR>
<TD WIDTH="70">x</TD>
<TD WIDTH="400">Register number Vx (x = 0 to F)</TD>
</TR>
<TR>
<TD WIDTH="70">y</TD>
<TD WIDTH="400">Register number Vy (y = 0 to F)</TD>
</TR>
<TR>
<TD WIDTH="70">z</TD>
<TD WIDTH="400">Register number Vz (y = 0 to F)</TD>
</TR>
<TR>
<TD WIDTH="70">[8aa]</TD>
<TD WIDTH="400">Memory value of address aa within page 8 (RAM)</TD>
</TR>
<TR>
<TD WIDTH="70">[Vy]</TD>
<TD WIDTH="400">Memory value of address in register Vy within in page 8 (RAM)</TD>
</TR>
<TR>
<TD WIDTH="70">F=</TD>
<TD WIDTH="400">Tone frequency</TD>
</TR>
<TR>
<TD WIDTH="70">.</TD>
<TD WIDTH="400">Not used, value doesn't matter</TD>
</TR>
<TR>
<TD WIDTH="70">1..9, A..F</TD>
<TD WIDTH="400">Hexadecimal digits</TD>
</TR>
</table>
<h2>Syntax</h2>
<table>
<TR>
<TD WIDTH="55">6xyz</TD>
<TD WIDTH="40">ADD</TD>
<TD WIDTH="100">Vz, Vx+Vy</TD>
<TD WIDTH="250">Vz = Vx + Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">6xyx</TD>
<TD WIDTH="40">ADD</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx + Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">Bxyx</TD>
<TD WIDTH="40">ADD8</TD>
<TD WIDTH="100">Vx, Vy, Vz</TD>
<TD WIDTH="250">If (Vx+Vy)&amp;7 = 8 THEN Vz = hex FF ELSE Vx = Vx+Vy</TD>
</TR>
<TR>
<TD WIDTH="55">9dkk</TD>
<TD WIDTH="40">BEEP</TD>
<TD WIDTH="100">F=kk, d<br>kk, d</TD>
<TD WIDTH="250">Beep with a frequency kk and duration d</TD>
</TR>
<TR>
<TD WIDTH="55">1aaa</TD>
<TD WIDTH="40">CALL</TD>
<TD WIDTH="100">aaa</TD>
<TD WIDTH="250">Call subroutine at aaa. The subroutine must end in C0 (which is the 'GPL' equivalent of RETURN)</TD>
</TR>
<TR>
<TD WIDTH="55">Axyn</TD>
<TD WIDTH="40">DRW</TD>
<TD WIDTH="100">Vx, Vy, n</TD>
<TD WIDTH="250">Draw 8*8 graphics:
<br>n: bit 0-2, specify the number of graphics to draw - 1 (0 will draw one graphic, 7 will draw 8 graphics)
<br>n: bit 3, 0 = next graphic, 1 = repeat same graphic
<br>Page 6 [Vx to Vx+8] contains the graphic memory location start, calculated as: 
<br>- bit 0 defines the lower byte of graphic memory location bit 3
<br>- bit 1-3 defines page number 0=Page 5, 1=Page 4, 2=Page 3, 3=Page 2 etc.
<br>- bit 4-7 defines the lower byte of graphic memory location bit 4-7 e.g. B0 points to memory 5B0, B2 points to 4B0, B3 points to 4B8. 
<br>Graphic memory location bit 0-2 are always 0, the graphic memory should contain 8 bytes to make up the 8*8 graphic which will be stored on screen location Vy-hex A0. Where hex A0 is top left corner, hex A8 the right corner, hex D0 bottom left corner and hex D8 bottom right corner. The memory location values used (from page 6) are copied to hex 8A0-8D8 RAM</TD>
</TR>
<TR>
<TD WIDTH="55">Faaa</TD>
<TD WIDTH="40">JP</TD>
<TD WIDTH="100">aaa</TD>
<TD WIDTH="250">Jump to address aaa</TD>
</TR>
<TR>
<TD WIDTH="55">5xy.</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">B, Vy, Vx</TD>
<TD WIDTH="250">Store BCD value of Vx in Vy, Vy+1 and Vy+2, Vy will point to last byte of the converted number</TD>
</TR>
<TR>
<TD WIDTH="55">Ex.0</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, COIN</TD>
<TD WIDTH="250">Load status coin detector to Vx, no coin Vx = 0, coin Vx = 1</TD>
</TR>
<TR>
<TD WIDTH="55">Ex.1</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, FIREA</TD>
<TD WIDTH="250">Load status fire key player A to Vx, no fire pressed Vx = 0, fire pressed Vx = 1</TD>
</TR>
<TR>
<TD WIDTH="55">Ex.2</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, FIREB</TD>
<TD WIDTH="250">Load status fire key player B to Vx, no fire pressed Vx = 0, fire pressed Vx = 1</TD>
</TR>
<TR>
<TD WIDTH="55">Ex.4</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, JOYA</TD>
<TD WIDTH="250">Load status joystick keys player A to Vx</TD>
</TR>
<TR>
<TD WIDTH="55">Ex.8</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, JOYB</TD>
<TD WIDTH="250">Load status joystick keys player B to Vx</TD>
</TR>
<TR>
<TD WIDTH="55">4xkk</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vx, kk</TD>
<TD WIDTH="250">Vx = kk</TD>
</TR>
<TR>
<TD WIDTH="55">C8y.</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vy, PAR</TD>
<TD WIDTH="250">Load input parameter switch to Vy</TD>
</TR>
<TR>
<TD WIDTH="55">6xyz</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vz, Vx+Vy</TD>
<TD WIDTH="250">Same as ADD: Vz = Vx + Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">7xyz</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vz, Vx-Vy</TD>
<TD WIDTH="250">Same as SUB: Vz = Vx - Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">Dxaa</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">[8aa], Vx<br>8aa, vx</TD>
<TD WIDTH="250">Memory Location [8aa] = Vx</TD>
</TR>
<TR>
<TD WIDTH="55">C4</TD>
<TD WIDTH="40">NO</TD>
<TD WIDTH="100">OP</TD>
<TD WIDTH="250">Do nothing (same as CC)</TD>
</TR>
<TR>
<TD WIDTH="55">C0</TD>
<TD WIDTH="40">RETURN</TD>
<TD WIDTH="100"></TD>
<TD WIDTH="250">Return from subroutine</TD>
</TR>
<TR>
<TD WIDTH="55">8xkk</TD>
<TD WIDTH="40">RND</TD>
<TD WIDTH="100">Vx, kk</TD>
<TD WIDTH="250">Vx = random AND kk</TD>
</TR>
<TR>
<TD WIDTH="55">2xkk</TD>
<TD WIDTH="40">SNE</TD>
<TD WIDTH="100">Vx, kk</TD>
<TD WIDTH="250">Skip next instruction if Vx != kk</TD>
</TR>
<TR>
<TD WIDTH="55">3xaa</TD>
<TD WIDTH="40">SNE</TD>
<TD WIDTH="100">Vx, [8aa]<br>Vx, 8aa</TD>
<TD WIDTH="250">Skip next instruction if Vx != memory location [8aa]</TD>
</TR>
<TR>
<TD WIDTH="55">7xyz</TD>
<TD WIDTH="40">SUB</TD>
<TD WIDTH="100">Vz, Vx-Vy</TD>
<TD WIDTH="250">Vz = Vx - Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">7xyx</TD>
<TD WIDTH="40">SUB</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx - Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">0aaa</TD>
<TD WIDTH="40">SYS</TD>
<TD WIDTH="100">aaa</TD>
<TD WIDTH="250">Call CDP1801 code at aaa. The subroutine must end in a RET (D4)</TD>
</TR>
<TR>
<TD WIDTH="55">C1kk</TD>
<TD WIDTH="40">TONE</TD>
<TD WIDTH="100">F=kk<br>kk</TD>
<TD WIDTH="250">Tone on with frequency kk (same as C3kk, C5kk, C7kk, C9kk, CBkk, CDkk, CFkk)</TD>
</TR>
<TR>
<TD WIDTH="55">C2..</TD>
<TD WIDTH="40">TONE</TD>
<TD WIDTH="100">OFF</TD>
<TD WIDTH="250">Tone off (same as C6.., CA.., CE..)</TD>
</TR>
</table>
