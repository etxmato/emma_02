1802 -> Native
2 Classes read.
143 Patterns read.
    1 0000:             	;; Simple disassembler for Elf2K by Al Williams
    2 0000:             	;; Should work OK for platforms with BIOS present
    3 0000:             	;; otherwise, you'll need to implement call/ret
    4 0000:             	;; and the f_* functions used below
    5 0000:             include bios.inc
    6 0000:             scall:      equ  r4
    7 0000:             sret:       equ  r5
    8 0000:             call:       equ  0ffe0h
    9 0000:             ret:        equ  0fff1h
   10 0000:             f_boot:     equ  0ff00h
   11 0000:             f_type:     equ  0ff03h
   12 0000:             f_brktest   equ  0ff6ch
   13 0000:             f_read:     equ  0ff06h
   14 0000:             f_msg:      equ  0ff09h
   15 0000:             f_typex:    equ  0ff0ch
   16 0000:             f_input:    equ  0ff0fh
   17 0000:             f_strcmp:   equ  0ff12h
   18 0000:             f_ltrim:    equ  0ff15h
   19 0000:             f_strcpy:   equ  0ff18h
   20 0000:             f_memcpy:   equ  0ff1bh
   21 0000:             f_wrtsec:   equ  0ff1eh
   22 0000:             f_rdsec:    equ  0ff21h
   23 0000:             f_seek0:    equ  0ff24h
   24 0000:             f_seek:     equ  0ff27h
   25 0000:             f_drive:    equ  0ff2ah
   26 0000:             f_setbd:    equ  0ff2dh
   27 0000:             f_mul16:    equ  0ff30h
   28 0000:             f_div16:    equ  0ff33h
   29 0000:             f_idereset: equ  0ff36h
   30 0000:             f_idewrite: equ  0ff39h
   31 0000:             f_ideread:  equ  0ff3ch
   32 0000:             f_initcall: equ  0ff3fh
   33 0000:             f_bootide:  equ  0ff42h
   34 0000:             f_hexin:    equ  0ff45h
   35 0000:             f_hexout2:  equ  0ff48h
   36 0000:             f_hexout4:  equ  0ff4bh
   37 0000:             f_tty:      equ  0ff4eh
   38 0000:             f_mover:    equ  0ff51h
   39 0000:             f_minimon:  equ  0ff54h
   40 0000:             f_freemem:  equ  0ff57h
   41 0000:             f_isnum:    equ  0ff5ah
   42 0000:             f_atoi:     equ  0ff5dh
   43 0000:             f_uintout:  equ  0ff60h
   44 0000:             f_intout:   equ  0ff63h
   45 0000:             stack: equ stacktop
   46 0000:             monitor: equ 8000h
   47 0000:             
   48 0000:             
   49 0000:             	;; set to DEBUG for breakpoints, XDEBUG for none
            #define XDEBUG 1
   51 0000:             	;; Set to SIMULATE if you want UART timing, XSIMULATE if not
            #define XSIMULATE 1  (calls UART timing setup)
   53 0000:             
            #define ADDRESS ra	
            #define SP r2
            #define OPCODE r9	
            #define PC r3	
            #define STRING rf
   59 0000:             	
   60 0000:             	;; breakpoint if DEBUG is set
   61                   breakpoint: macro
   62                   #ifdef DEBUG
   63                   	hbreakpoint
   64                   #endif
   65                   	endm
            
   66 0000:             	
   67 0000:             	;; Fixed breakpoint
   68                   hbreakpoint:macro
   69                           mark
   70                   	sep r1
   71                   	endm
            
   72 0000:             	
   73 0000:             	;; Load 16-bit imm to register
   74                   ldir: macro REG,VALUE 
   75                           ldi VALUE.0
   76                   	plo REG
   77                   	ldi VALUE.1
   78                   	phi REG
   79                   	endm
            
   80 0000:             	
   81 0000:             	
   82 0000:             	;; SCRT call
   83                   call: macro ADD
   84                   	sep scall
   85                   	dw ADD
   86                   	endm
            
   87 0000:             	
   88 0000:             	;; SCRT Return
   89                   return: macro
   90                   	sep sret
   91                   	endm
            
   92 0000:             
   93 0000:             
   94 0000:             	;; Set register to 0
   95                   zeroreg: macro REG
   96                   	ldi 0
   97                   	plo REG
   98                   	phi REG
   99                   	endm
            
  100 0000:             
  101 0000:             	;; 16 bit shift left
  102                   sl16: macro REG
  103                   	glo REG
  104                   	shl
  105                   	plo REG
  106                   	ghi REG
  107                   	shlc
  108                   	phi REG
  109                   	endm
            
  110 0000:             
  111 0000:             	;; 16 bit shift right
  112                   sr16: macro REG
  113                   	ghi REG
  114                   	shr
  115                   	phi REG
  116                   	glo REG
  117                   	shrc
  118                   	plo REG
  119                   	endm	
            
  120 0000:             
  121 0000:             
  122 0000:             	org 0
  123 0000:             	; standard initialization
  124 0000:             top:    ldir SP,stack
      0000: f8 2f               ldi VALUE.0
      0002: a2          	plo REG
      0003: f8 08       	ldi VALUE.1
      0005: b2          	phi REG
      0006:             	endm
  125 0006:             	ldir r6,start   ; set main return address to init SCRT
      0006: f8 0f               ldi VALUE.0
      0008: a6          	plo REG
      0009: f8 00       	ldi VALUE.1
      000b: b6          	phi REG
      000c:             	endm
  126 000c: c0 ff 3f    	lbr f_initcall  ; init SCRT
  127 000f:             start:
  128 000f: e2          	sex SP 			; Stack pointer
  129 0010:             	
            #endif	
  133 0010:             
  134 0010:             	;; Sign on message
  135 0010:             	ldir STRING,msg0
      0010: f8 ea               ldi VALUE.0
      0012: af          	plo REG
      0013: f8 02       	ldi VALUE.1
      0015: bf          	phi REG
      0016:             	endm
  136 0016:             	call f_msg
      0016: d4          	sep scall
      0017: ff 09       	dw ADD
      0019:             	endm
  137 0019:             	zeroreg ADDRESS
      0019: f8 00       	ldi 0
      001b: aa          	plo REG
      001c: ba          	phi REG
      001d:             	endm
  138 001d:             	call readhex
      001d: d4          	sep scall
      001e: 03 4c       	dw ADD
      0020:             	endm
  139 0020:             	call crlf
      0020: d4          	sep scall
      0021: 02 b9       	dw ADD
      0023:             	endm
  140 0023:             readloop:
  141 0023:             	;; check for break
  142 0023:             	call f_brktest
      0023: d4          	sep scall
      0024: ff 6c       	dw ADD
      0026:             	endm
  143 0026: 3b 2a       	bnf continue
  144 0028:             	hbreakpoint		; end program here
      0028: 79                  mark
      0029: d1          	sep r1
      002a:             	endm
  145 002a:             continue:		
  146 002a: 9a          	ghi ADDRESS
  147 002b:             	call outbyted
      002b: d4          	sep scall
      002c: 02 cc       	dw ADD
      002e:             	endm
  148 002e: 8a          	glo ADDRESS
  149 002f:             	call outbyted
      002f: d4          	sep scall
      0030: 02 cc       	dw ADD
      0032:             	endm
  150 0032:             	call space
      0032: d4          	sep scall
      0033: 02 b5       	dw ADD
      0035:             	endm
  151 0035: 4a          	lda ADDRESS
  152 0036: a9          	plo OPCODE
  153 0037:             	call outbyted
      0037: d4          	sep scall
      0038: 02 cc       	dw ADD
      003a:             	endm
  154 003a: 89          	glo OPCODE
  155 003b: fa f0       	ani 0f0h
  156 003d: f6          	shr
  157 003e: f6          	shr
  158 003f: f6          	shr            		;  high nibble/8 (so 30 -> 06)
  159 0040: 52          	str SP
  160 0041: f6          	shr
  161 0042: f4          	add     		;  3*
  162 0043: fc 46       	adi jtbl.0
  163 0045: a3          	plo PC			; computed jump
  164 0046:             jtbl:
  165 0046: c0 00 76    	lbr i0
  166 0049: c0 00 9b    	lbr i1
  167 004c: c0 00 a3    	lbr i2
  168 004f: c0 00 ab    	lbr i3
  169 0052: c0 00 e9    	lbr i4
  170 0055: c0 00 f2    	lbr i5
  171 0058: c0 01 04    	lbr i6
  172 005b: c0 01 31    	lbr i7
  173 005e: c0 01 9f    	lbr i8
  174 0061: c0 01 a8    	lbr i9
  175 0064: c0 01 b1    	lbr ia
  176 0067: c0 01 ba    	lbr ib
  177 006a: c0 02 2d    	lbr ic
  178 006d: c0 01 c3    	lbr id
  179 0070: c0 01 cc    	lbr ie
  180 0073: c0 01 d5    	lbr if
  181 0076:             	
  182 0076:             	;; i0 for instruction 0x, i1 is 1x, etc.
  183 0076:             i0:
  184 0076: 89          	glo OPCODE
  185 0077: fa 0f       	ani 0fh
  186 0079: 3a 86       	bnz ildn
  187 007b:             	ldir STRING,tidl	; 00=IDL
      007b: f8 8c               ldi VALUE.0
      007d: af          	plo REG
      007e: f8 03       	ldi VALUE.1
      0080: bf          	phi REG
      0081:             	endm
  188 0081:             noarg:		
  189 0081:             	call f_msg
      0081: d4          	sep scall
      0082: ff 09       	dw ADD
      0084:             	endm
  190 0084: 30 23       	br readloop
  191 0086:             	
  192 0086:             ildn: 				; 0N=LDN
  193 0086:             	ldir STRING,tldn
      0086: f8 99               ldi VALUE.0
      0088: af          	plo REG
      0089: f8 03       	ldi VALUE.1
      008b: bf          	phi REG
      008c:             	endm
  194 008c:             	;; here RN is printed (reused by many others)
  195 008c:             reginst:		
  196 008c:             	call f_msg
      008c: d4          	sep scall
      008d: ff 09       	dw ADD
      008f:             	endm
  197 008f: 89          	glo OPCODE
  198 0090: fa 0f       	ani 0fh
  199 0092: af          	plo STRING
  200 0093:             	call printr
      0093: d4          	sep scall
      0094: 02 c4       	dw ADD
      0096:             	endm
  201 0096:             	;; end of line
  202 0096:             doneline:		
  203 0096:             	call crlf
      0096: d4          	sep scall
      0097: 02 b9       	dw ADD
      0099:             	endm
  204 0099: 30 23       	br readloop
  205 009b:             	
  206 009b:             i1:
  207 009b:             	ldir STRING,tinc
      009b: f8 a5               ldi VALUE.0
      009d: af          	plo REG
      009e: f8 03       	ldi VALUE.1
      00a0: bf          	phi REG
      00a1:             	endm
  208 00a1: 30 8c       	br reginst
  209 00a3:             i2:
  210 00a3:             	ldir STRING,tdec
      00a3: f8 b1               ldi VALUE.0
      00a5: af          	plo REG
      00a6: f8 03       	ldi VALUE.1
      00a8: bf          	phi REG
      00a9:             	endm
  211 00a9: 30 8c       	br reginst
  212 00ab:             i3:
  213 00ab:             	call space
      00ab: d4          	sep scall
      00ac: 02 b5       	dw ADD
      00ae:             	endm
  214 00ae:             	;; output next byte (but don't advance)
  215 00ae: 0a          	ldn ADDRESS  		
  216 00af:             	call outbyted
      00af: d4          	sep scall
      00b0: 02 cc       	dw ADD
      00b2:             	endm
  217 00b2:             	call space
      00b2: d4          	sep scall
      00b3: 02 b5       	dw ADD
      00b5:             	endm
  218 00b5:             	call space
      00b5: d4          	sep scall
      00b6: 02 b5       	dw ADD
      00b8:             	endm
  219 00b8:             	call space
      00b8: d4          	sep scall
      00b9: 02 b5       	dw ADD
      00bb:             	endm
  220 00bb:             	call space
      00bb: d4          	sep scall
      00bc: 02 b5       	dw ADD
      00be:             	endm
  221 00be:             	ldir STRING, btable
      00be: f8 4f               ldi VALUE.0
      00c0: af          	plo REG
      00c1: f8 04       	ldi VALUE.1
      00c3: bf          	phi REG
      00c4:             	endm
  222 00c4:             	;; figure out which branch it is
  223 00c4: 89          	glo OPCODE
  224 00c5: fa 0f       	ani 0fh
  225 00c7:             i3loop:		
  226 00c7: 32 d0       	bz print3		; scan btable until we find it
  227 00c9: fc ff       	adi -1
  228 00cb: 1f          	inc STRING
  229 00cc: 1f          	inc STRING
  230 00cd: 1f          	inc STRING
  231 00ce: 30 c7       	br i3loop
  232 00d0: 4f          print3:	lda STRING		; print it
  233 00d1:             	call f_type
      00d1: d4          	sep scall
      00d2: ff 03       	dw ADD
      00d4:             	endm
  234 00d4: 4f          	lda STRING
  235 00d5:             	call f_type
      00d5: d4          	sep scall
      00d6: ff 03       	dw ADD
      00d8:             	endm
  236 00d8: 4f          	lda STRING
  237 00d9:             	call f_type
      00d9: d4          	sep scall
      00da: ff 03       	dw ADD
      00dc:             	endm
  238 00dc:             	call space
      00dc: d4          	sep scall
      00dd: 02 b5       	dw ADD
      00df:             	endm
  239 00df: 9a          	ghi ADDRESS
  240 00e0:             	call outbyted
      00e0: d4          	sep scall
      00e1: 02 cc       	dw ADD
      00e3:             	endm
  241 00e3: 4a          	lda ADDRESS		; now get next byte and advance
  242 00e4:             	call outbyted		; print that
      00e4: d4          	sep scall
      00e5: 02 cc       	dw ADD
      00e7:             	endm
  243 00e7: 30 96       	br doneline		; done
  244 00e9:             i4:
  245 00e9:             	ldir STRING,tlda
      00e9: f8 bd               ldi VALUE.0
      00eb: af          	plo REG
      00ec: f8 03       	ldi VALUE.1
      00ee: bf          	phi REG
      00ef:             	endm
  246 00ef: c0 00 8c    	lbr reginst
  247 00f2:             i5:
  248 00f2:             	ldir STRING,tstr
      00f2: f8 c9               ldi VALUE.0
      00f4: af          	plo REG
      00f5: f8 03       	ldi VALUE.1
      00f7: bf          	phi REG
      00f8:             	endm
  249 00f8: c0 00 8c    	lbr reginst
  250 00fb:             	
  251 00fb:             i6dead:
  252 00fb:             		;; dead op code
  253 00fb:             	ldir STRING,twhat
      00fb: f8 42               ldi VALUE.0
      00fd: af          	plo REG
      00fe: f8 04       	ldi VALUE.1
      0100: bf          	phi REG
      0101:             	endm
  254 0101: c0 00 81    	lbr noarg
  255 0104:             
  256 0104:             i6:				; I/O is odd 60=IRX 61-67, 69-6F and 68 is dead
  257 0104: 89          	glo OPCODE
  258 0105: fb 68       	xri 68h
  259 0107: c2 00 fb    	lbz i6dead
  260 010a:             i6norm:		
  261 010a: fa 0f       	ani 0fh
  262 010c: 3a 17       	bnz i6io		; 60 is IRX
  263 010e:             	ldir STRING,tirx
      010e: f8 1d               ldi VALUE.0
      0110: af          	plo REG
      0111: f8 04       	ldi VALUE.1
      0113: bf          	phi REG
      0114:             	endm
  264 0114: c0 00 81    	lbr noarg
  265 0117: fd 07       i6io:	sdi 7
  266 0119:             	ldir STRING,tout	; assume OUT
      0119: f8 2a               ldi VALUE.0
      011b: af          	plo REG
      011c: f8 04       	ldi VALUE.1
      011e: bf          	phi REG
      011f:             	endm
  267 011f: 33 27       	bge io
  268 0121:             	ldir STRING,tinp	; Nope, was an INP
      0121: f8 36               ldi VALUE.0
      0123: af          	plo REG
      0124: f8 04       	ldi VALUE.1
      0126: bf          	phi REG
      0127:             	endm
  269 0127:             io:	
  270 0127:             	call f_msg
      0127: d4          	sep scall
      0128: ff 09       	dw ADD
      012a:             	endm
  271 012a: 89          	glo OPCODE		; print one nibble
  272 012b:             	call prhex
      012b: d4          	sep scall
      012c: 02 da       	dw ADD
      012e:             	endm
  273 012e: c0 00 96    	lbr doneline
  274 0131:             
  275 0131:             
  276 0131:             i7:
  277 0131:             	;; 7C, 7D, 7F require byte arguments
  278 0131: f8 00       	ldi 0
  279 0133: b9          	phi OPCODE  		;  OPCODE is 0 if one byte opcode; or C, D, or F 
  280 0134: 89          	glo OPCODE
  281 0135: 52          	str SP    		;  put low nibbble on TOS
  282 0136: f8 7c       	ldi 7Ch
  283 0138: f5          	sd			; D=(TOS)-7CH (or 7d or 7f)
  284 0139: 32 53       	bz  i7b
  285 013b: f8 7d       	ldi 7Dh
  286 013d: f5          	sd
  287 013e: 32 53       	bz i7b
  288 0140: f8 7f       	ldi 7Fh
  289 0142: f5          	sd
  290 0143: 32 53       	bz i7b
  291 0145:             	;; "normal" (no extra byte)
  292 0145:             	call space
      0145: d4          	sep scall
      0146: 02 b5       	dw ADD
      0148:             	endm
  293 0148:             	call space
      0148: d4          	sep scall
      0149: 02 b5       	dw ADD
      014b:             	endm
  294 014b:             	call space
      014b: d4          	sep scall
      014c: 02 b5       	dw ADD
      014e:             	endm
  295 014e:             	call space
      014e: d4          	sep scall
      014f: 02 b5       	dw ADD
      0151:             	endm
  296 0151: 30 65       	br i7norm
  297 0153:             i7b:	call space  		; extra byte
      0153: d4          	sep scall
      0154: 02 b5       	dw ADD
      0156:             	endm
  298 0156: f8 01       	ldi 01
  299 0158: b9          	phi OPCODE		; put non-zero byte in flag
  300 0159: 0a          	ldn ADDRESS
  301 015a:             	call outbyted
      015a: d4          	sep scall
      015b: 02 cc       	dw ADD
      015d:             	endm
  302 015d:             	call space
      015d: d4          	sep scall
      015e: 02 b5       	dw ADD
      0160:             	endm
  303 0160:             	call space
      0160: d4          	sep scall
      0161: 02 b5       	dw ADD
      0163:             	endm
  304 0163: 30 68       	br i7byte
  305 0165:             i7norm:	
  306 0165:             	call space
      0165: d4          	sep scall
      0166: 02 b5       	dw ADD
      0168:             	endm
  307 0168:             i7byte:		
  308 0168:             	call space
      0168: d4          	sep scall
      0169: 02 b5       	dw ADD
      016b:             	endm
  309 016b:             	call space
      016b: d4          	sep scall
      016c: 02 b5       	dw ADD
      016e:             	endm
  310 016e:             	ldir STRING,i7tbl
      016e: f8 7f               ldi VALUE.0
      0170: af          	plo REG
      0171: f8 04       	ldi VALUE.1
      0173: bf          	phi REG
      0174:             	endm
  311 0174: 89          	glo OPCODE			; get op code again
  312 0175: fa 0f       	ani 0fh  		
  313 0177:             i7loop:	
  314 0177: 32 81       	bz print7		;  locate entry in table
  315 0179: fc ff       	adi -1
  316 017b: 1f          	inc STRING
  317 017c: 1f          	inc STRING
  318 017d: 1f          	inc STRING
  319 017e: 1f          	inc STRING
  320 017f: 30 77       	br i7loop
  321 0181: 4f          print7:	lda STRING			; print table entry
  322 0182:             	call f_type
      0182: d4          	sep scall
      0183: ff 03       	dw ADD
      0185:             	endm
  323 0185: 4f          	lda STRING
  324 0186:             	call f_type
      0186: d4          	sep scall
      0187: ff 03       	dw ADD
      0189:             	endm
  325 0189: 4f          	lda STRING
  326 018a:             	call f_type
      018a: d4          	sep scall
      018b: ff 03       	dw ADD
      018d:             	endm
  327 018d: 4f          	lda STRING
  328 018e:             	call f_type
      018e: d4          	sep scall
      018f: ff 03       	dw ADD
      0191:             	endm
  329 0191: 99          	ghi OPCODE			; get the "one byte flag"
  330 0192: ca 00 96    	lbnz doneline
  331 0195:             	call space
      0195: d4          	sep scall
      0196: 02 b5       	dw ADD
      0198:             	endm
  332 0198: 4a          	lda ADDRESS
  333 0199:             	call outbyted
      0199: d4          	sep scall
      019a: 02 cc       	dw ADD
      019c:             	endm
  334 019c: c0 00 96    	lbr doneline
  335 019f:             
  336 019f:             i8:
  337 019f:             	ldir STRING,tglo
      019f: f8 d5               ldi VALUE.0
      01a1: af          	plo REG
      01a2: f8 03       	ldi VALUE.1
      01a4: bf          	phi REG
      01a5:             	endm
  338 01a5: c0 00 8c    	lbr reginst
  339 01a8:             i9:
  340 01a8:             	ldir STRING,tghi
      01a8: f8 e1               ldi VALUE.0
      01aa: af          	plo REG
      01ab: f8 03       	ldi VALUE.1
      01ad: bf          	phi REG
      01ae:             	endm
  341 01ae: c0 00 8c    	lbr reginst
  342 01b1:             ia:
  343 01b1:             	ldir STRING,tplo
      01b1: f8 ed               ldi VALUE.0
      01b3: af          	plo REG
      01b4: f8 03       	ldi VALUE.1
      01b6: bf          	phi REG
      01b7:             	endm
  344 01b7: c0 00 8c    	lbr reginst
  345 01ba:             ib:
  346 01ba:             	ldir STRING,tphi
      01ba: f8 f9               ldi VALUE.0
      01bc: af          	plo REG
      01bd: f8 03       	ldi VALUE.1
      01bf: bf          	phi REG
      01c0:             	endm
  347 01c0: c0 00 8c    	lbr reginst
  348 01c3:             	
  349 01c3:             id:
  350 01c3:             	ldir STRING,tsep
      01c3: f8 05               ldi VALUE.0
      01c5: af          	plo REG
      01c6: f8 04       	ldi VALUE.1
      01c8: bf          	phi REG
      01c9:             	endm
  351 01c9: c0 00 8c    	lbr reginst
  352 01cc:             ie:
  353 01cc:             	ldir STRING,tsex
      01cc: f8 11               ldi VALUE.0
      01ce: af          	plo REG
      01cf: f8 04       	ldi VALUE.1
      01d1: bf          	phi REG
      01d2:             	endm
  354 01d2: c0 00 8c    	lbr reginst
  355 01d5:             
  356 01d5:             if:
  357 01d5:             
  358 01d5:             	;; F8, F9 FA FB FC FD and FF take arguments
  359 01d5: f8 00       	ldi 0
  360 01d7: b9          	phi OPCODE  		;  OPCODE is 0 if one byte opcode; or C, D, or F 
  361 01d8: 89          	glo OPCODE
  362 01d9: fb fe       	xri 0FEh
  363 01db: 32 ec       	bz fsingle
  364 01dd: 89          	glo OPCODE
  365 01de: fa 08       	ani 8
  366 01e0: 32 ec       	bz fsingle
  367 01e2:             	;; two bytes
  368 01e2:             	call space  		; extra byte
      01e2: d4          	sep scall
      01e3: 02 b5       	dw ADD
      01e5:             	endm
  369 01e5: b9          	phi OPCODE			; non-zero flag
  370 01e6: 0a          	ldn ADDRESS
  371 01e7:             	call outbyted
      01e7: d4          	sep scall
      01e8: 02 cc       	dw ADD
      01ea:             	endm
  372 01ea: 30 f5       	br ifbyte
  373 01ec:             fsingle:	
  374 01ec:             	;; "normal" (no extra byte)
  375 01ec:             	call space
      01ec: d4          	sep scall
      01ed: 02 b5       	dw ADD
      01ef:             	endm
  376 01ef:             	call space
      01ef: d4          	sep scall
      01f0: 02 b5       	dw ADD
      01f2:             	endm
  377 01f2:             	call space
      01f2: d4          	sep scall
      01f3: 02 b5       	dw ADD
      01f5:             	endm
  378 01f5:             ifbyte:		
  379 01f5:             	call space
      01f5: d4          	sep scall
      01f6: 02 b5       	dw ADD
      01f8:             	endm
  380 01f8:             	call space
      01f8: d4          	sep scall
      01f9: 02 b5       	dw ADD
      01fb:             	endm
  381 01fb:             	call space
      01fb: d4          	sep scall
      01fc: 02 b5       	dw ADD
      01fe:             	endm
  382 01fe:             	call space
      01fe: d4          	sep scall
      01ff: 02 b5       	dw ADD
      0201:             	endm
  383 0201:             	ldir STRING,iftbl
      0201: f8 ff               ldi VALUE.0
      0203: af          	plo REG
      0204: f8 04       	ldi VALUE.1
      0206: bf          	phi REG
      0207:             	endm
  384 0207: 89          	glo OPCODE			; get op code again
  385 0208: fa 0f       	ani 0fh  		
  386 020a:             ifloop:	
  387 020a: 32 13       	bz printf		;  locate entry in table
  388 020c: fc ff       	adi -1
  389 020e: 1f          	inc STRING
  390 020f: 1f          	inc STRING
  391 0210: 1f          	inc STRING
  392 0211: 30 0a       	br ifloop
  393 0213: 4f          printf:	lda STRING			; print table entry
  394 0214:             	call f_type
      0214: d4          	sep scall
      0215: ff 03       	dw ADD
      0217:             	endm
  395 0217: 4f          	lda STRING
  396 0218:             	call f_type
      0218: d4          	sep scall
      0219: ff 03       	dw ADD
      021b:             	endm
  397 021b: 4f          	lda STRING
  398 021c:             	call f_type
      021c: d4          	sep scall
      021d: ff 03       	dw ADD
      021f:             	endm
  399 021f: 99          	ghi OPCODE			; get the "one byte flag"
  400 0220: c2 00 96    	lbz doneline
  401 0223:             	call space
      0223: d4          	sep scall
      0224: 02 b5       	dw ADD
      0226:             	endm
  402 0226: 4a          	lda ADDRESS
  403 0227:             	call outbyted
      0227: d4          	sep scall
      0228: 02 cc       	dw ADD
      022a:             	endm
  404 022a: c0 00 96    	lbr doneline
  405 022d:             
  406 022d:             
  407 022d:             ic:
  408 022d:             	;; annoyingly enough 012389AB take an extra 2 byte
  409 022d:             	;; 567CDEF do not take any bytes
  410 022d:             	;; 4 is apparently not used
  411 022d: f8 00       	ldi 0
  412 022f: b9          	phi OPCODE    		;  extra flag
  413 0230: 89          	glo OPCODE
  414 0231: 52          	str SP   		; put at top of stack
  415 0232:             	;;  look for special cases
  416 0232: f8 c4       	ldi 0c4h
  417 0234: f5          	sd
  418 0235: 32 6b       	bz csingle
  419 0237: f8 c5       	ldi 0c5h
  420 0239: f5          	sd
  421 023a: 32 6b       	bz csingle
  422 023c: f8 c6       	ldi 0c6h
  423 023e: 32 6b       	bz csingle
  424 0240: f8 c7       	ldi 0c7h
  425 0242: 32 6b       	bz csingle
  426 0244: f8 cc       	ldi 0cch
  427 0246: 32 6b       	bz csingle
  428 0248: f8 cd       	ldi 0cdh
  429 024a: 32 6b       	bz csingle
  430 024c: f8 ce       	ldi 0ceh
  431 024e: 32 6b       	bz csingle
  432 0250: f8 cf       	ldi 0cfh
  433 0252: 32 6b       	bz csingle
  434 0254:             	;; multibyte
  435 0254: f8 01       	ldi 1
  436 0256: b9          	phi OPCODE  		; set flag
  437 0257:             
  438 0257:             	call space
      0257: d4          	sep scall
      0258: 02 b5       	dw ADD
      025a:             	endm
  439 025a: 4a          	lda ADDRESS  		; get next byte
  440 025b:             	call outbyted
      025b: d4          	sep scall
      025c: 02 cc       	dw ADD
      025e:             	endm
  441 025e: 0a          	ldn ADDRESS
  442 025f:             	call outbyted
      025f: d4          	sep scall
      0260: 02 cc       	dw ADD
      0262:             	endm
  443 0262: 2a          	dec ADDRESS
  444 0263:             	call space
      0263: d4          	sep scall
      0264: 02 b5       	dw ADD
      0266:             	endm
  445 0266:             	call space
      0266: d4          	sep scall
      0267: 02 b5       	dw ADD
      0269:             	endm
  446 0269: 30 80       	br icgo
  447 026b:             csingle:
  448 026b:             	call space
      026b: d4          	sep scall
      026c: 02 b5       	dw ADD
      026e:             	endm
  449 026e:             	call space
      026e: d4          	sep scall
      026f: 02 b5       	dw ADD
      0271:             	endm
  450 0271:             	call space
      0271: d4          	sep scall
      0272: 02 b5       	dw ADD
      0274:             	endm
  451 0274:             	call space
      0274: d4          	sep scall
      0275: 02 b5       	dw ADD
      0277:             	endm
  452 0277:             	call space
      0277: d4          	sep scall
      0278: 02 b5       	dw ADD
      027a:             	endm
  453 027a:             	call space
      027a: d4          	sep scall
      027b: 02 b5       	dw ADD
      027d:             	endm
  454 027d:             	call space	
      027d: d4          	sep scall
      027e: 02 b5       	dw ADD
      0280:             	endm
  455 0280:             icgo:		
  456 0280:             	ldir STRING, cbtable  	;  find right entry in cbtable
      0280: f8 bf               ldi VALUE.0
      0282: af          	plo REG
      0283: f8 04       	ldi VALUE.1
      0285: bf          	phi REG
      0286:             	endm
  457 0286: 89          	glo OPCODE
  458 0287: fa 0f       	ani 0fh
  459 0289:             icloop:		
  460 0289: 32 93       	bz printc
  461 028b: fc ff       	adi -1
  462 028d: 1f          	inc STRING
  463 028e: 1f          	inc STRING
  464 028f: 1f          	inc STRING
  465 0290: 1f          	inc STRING
  466 0291: 30 89       	br icloop
  467 0293: 4f          printc:	lda STRING		; print it
  468 0294:             	call f_type
      0294: d4          	sep scall
      0295: ff 03       	dw ADD
      0297:             	endm
  469 0297: 4f          	lda STRING
  470 0298:             	call f_type
      0298: d4          	sep scall
      0299: ff 03       	dw ADD
      029b:             	endm
  471 029b: 4f          	lda STRING
  472 029c:             	call f_type
      029c: d4          	sep scall
      029d: ff 03       	dw ADD
      029f:             	endm
  473 029f: 4f          	lda STRING
  474 02a0:             	call f_type
      02a0: d4          	sep scall
      02a1: ff 03       	dw ADD
      02a3:             	endm
  475 02a3: 99          	ghi OPCODE		; check flag
  476 02a4: c2 00 96    	lbz doneline
  477 02a7:             	call space
      02a7: d4          	sep scall
      02a8: 02 b5       	dw ADD
      02aa:             	endm
  478 02aa: 4a          	lda ADDRESS		; print next bytes
  479 02ab:             	call outbyted
      02ab: d4          	sep scall
      02ac: 02 cc       	dw ADD
      02ae:             	endm
  480 02ae: 4a          	lda ADDRESS
  481 02af:             	call outbyted		
      02af: d4          	sep scall
      02b0: 02 cc       	dw ADD
      02b2:             	endm
  482 02b2: c0 00 96    	lbr doneline
  483 02b5:             	
  484 02b5:             
  485 02b5:             	;; print a space
  486 02b5: f8 20       space: ldi ' '
  487 02b7: 30 c0              br emit
  488 02b9:             	;; print a crlf
  489 02b9: f8 0d       crlf:  ldi 13
  490 02bb:                    call f_type
      02bb: d4          	sep scall
      02bc: ff 03       	dw ADD
      02be:             	endm
  491 02be: f8 0a              ldi 10
  492 02c0:             emit:  call f_type
      02c0: d4          	sep scall
      02c1: ff 03       	dw ADD
      02c3:             	endm
  493 02c3:                    return
      02c3: d5          	sep sret
      02c4:             	endm
  494 02c4:             	   
  495 02c4:             	;; Print register Rn (n in RF)
  496 02c4:             printr: 
  497 02c4: f8 52       	ldi 'R'
  498 02c6:             	call f_type
      02c6: d4          	sep scall
      02c7: ff 03       	dw ADD
      02c9:             	endm
  499 02c9: 8f          	glo STRING
  500 02ca: 30 da       	br prhex   		;  just over the boundry :(
  501 02cc:             	
  502 02cc:             	;;  output byte in D
  503 02cc: af          outbyted: plo STRING	
  504 02cd:             outbyte: ; print a hex byte in STRING
  505 02cd: 8f          	glo STRING
  506 02ce: fa f0       	ani 0f0h
  507 02d0: f6          	shr
  508 02d1: f6          	shr
  509 02d2: f6          	shr
  510 02d3: f6          	shr
  511 02d4:             	call prhex
      02d4: d4          	sep scall
      02d5: 02 da       	dw ADD
      02d7:             	endm
  512 02d7: 8f          	glo STRING
  513 02d8: fa 0f       	ani 0fh
  514 02da:             	
  515 02da:             	;; Print  a hex digit in D
  516 02da:             prhex:		
  517 02da: fa 0f       	ani 0fh
  518 02dc: fc 30       	adi 30h
  519 02de: 52          	str SP
  520 02df: fd 39       	sdi 39h
  521 02e1: 02          	ldn SP
  522 02e2: 33 e6       	bge prhex09
  523 02e4: fc 07       	adi 7   		;  adjust A-F
  524 02e6:             prhex09:
  525 02e6:             	call f_type
      02e6: d4          	sep scall
      02e7: ff 03       	dw ADD
      02e9:             	endm
  526 02e9:             	return
      02e9: d5          	sep sret
      02ea:             	endm
  527 02ea:             	
  528 02ea:             	;; This message appears here so the next block of code will hit the next page
  529 02ea: 0d 0a 31 38 
            30 32 20 44 
            69 73 61 73 
            73 65 6d 62 
            6c 65 72 20 
            56 31 20 62 
            79 20 41 6c 
            20 57 69 6c 
            6c 69 61 6d 
            73 20 61 6c 
            77 40 61 6c 
            2d 77 69 6c 
            6c 69 61 6d 
            73 2e 63 6f 
            6d 0d 0a 53 
            74 61 72 74 
            20 41 64 64 
            72 65 73 73 
            3f 00       msg0: db 13,10,'1802 Disassembler V1 by Al Williams alw@al-williams.com',13,10,'Start Address?',0
  530 0334:             	   
  531 0334:             	;; if readhex sees a backspace it comes here  
  532 0334:             backspace:
  533 0334:             	sr16 ADDRESS
      0334: 9a          	ghi REG
      0335: f6          	shr
      0336: ba          	phi REG
      0337: 8a          	glo REG
      0338: 76          	shrc
      0339: aa          	plo REG
      033a:             	endm	
  534 033a:             	sr16 ADDRESS
      033a: 9a          	ghi REG
      033b: f6          	shr
      033c: ba          	phi REG
      033d: 8a          	glo REG
      033e: 76          	shrc
      033f: aa          	plo REG
      0340:             	endm	
  535 0340:             	sr16 ADDRESS
      0340: 9a          	ghi REG
      0341: f6          	shr
      0342: ba          	phi REG
      0343: 8a          	glo REG
      0344: 76          	shrc
      0345: aa          	plo REG
      0346:             	endm	
  536 0346:             	sr16 ADDRESS
      0346: 9a          	ghi REG
      0347: f6          	shr
      0348: ba          	phi REG
      0349: 8a          	glo REG
      034a: 76          	shrc
      034b: aa          	plo REG
      034c:             	endm	
  537 034c:             	
  538 034c:             readhex: 			; read hex number to ra (uses OPCODE)
  539 034c:             	call f_read
      034c: d4          	sep scall
      034d: ff 06       	dw ADD
      034f:             	endm
  540 034f: a9          	plo OPCODE
  541 0350: fb 08       	xri 08  		;  backspace
  542 0352: 32 34       	bz backspace
  543 0354: 89          	glo OPCODE
  544 0355: fb 0d       	xri 0dh			; CR?
  545 0357: 32 8b       	bz done
  546 0359:             skipdone:	
  547 0359:             ; shift ADDRESS 4 places left
  548 0359:             	sl16 ADDRESS
      0359: 8a          	glo REG
      035a: fe          	shl
      035b: aa          	plo REG
      035c: 9a          	ghi REG
      035d: 7e          	shlc
      035e: ba          	phi REG
      035f:             	endm
  549 035f:             	sl16 ADDRESS
      035f: 8a          	glo REG
      0360: fe          	shl
      0361: aa          	plo REG
      0362: 9a          	ghi REG
      0363: 7e          	shlc
      0364: ba          	phi REG
      0365:             	endm
  550 0365:             	sl16 ADDRESS
      0365: 8a          	glo REG
      0366: fe          	shl
      0367: aa          	plo REG
      0368: 9a          	ghi REG
      0369: 7e          	shlc
      036a: ba          	phi REG
      036b:             	endm
  551 036b:             	sl16 ADDRESS
      036b: 8a          	glo REG
      036c: fe          	shl
      036d: aa          	plo REG
      036e: 9a          	ghi REG
      036f: 7e          	shlc
      0370: ba          	phi REG
      0371:             	endm
  552 0371:             	breakpoint
            #endif
      0371:             	endm
  556 0371:             ; get character back
  557 0371: 89          	glo OPCODE
  558 0372: fd 3a       	sdi 03ah  ; >'9'?
  559 0374: 89          	glo OPCODE
  560 0375: 3b 7b       	bl alphahex
  561 0377:             ; digit
  562 0377:             	breakpoint
            #endif
      0377:             	endm
  566 0377: fc d0               adi -30h
  567 0379: 30 7f       	br  addhex
  568 037b:             alphahex:	
  569 037b:             	breakpoint
            #endif
      037b:             	endm
  573 037b: fa df       	ani 0dfh  ; make lc upper case
  574 037d: fc c9       	adi -37h  ; make A->10
  575 037f:             addhex:
  576 037f:                 breakpoint
            #endif
      037f:             	endm
  580 037f: 52          	str SP   ; put on top of stack temporarily
  581 0380: 8a          	glo ADDRESS
  582 0381: f4          	add
  583 0382: aa          	plo ADDRESS
  584 0383: f8 00       	ldi 0
  585 0385: 52          	str SP
  586 0386: 9a          	ghi ADDRESS
  587 0387: 74          	adc
  588 0388: ba          	phi ADDRESS
  589 0389: 30 4c       	br readhex
  590 038b:             done:
  591 038b:                 return 
      038b: d5          	sep sret
      038c:             	endm
  592 038c:             
  593 038c:             
  594 038c: 20 20 20 20 
            20 20 20 49 
            44 4c 0d 0a 
            00          tidl: db '       IDL',13,10,0
  595 0399: 20 20 20 20 
            20 20 20 4c 
            44 4e 20 00 tldn: db '       LDN ',0
  596 03a5: 20 20 20 20 
            20 20 20 49 
            4e 43 20 00 tinc: db '       INC ',0
  597 03b1: 20 20 20 20 
            20 20 20 44 
            45 43 20 00 tdec: db '       DEC ',0
  598 03bd: 20 20 20 20 
            20 20 20 4c 
            44 41 20 00 tlda: db '       LDA ',0
  599 03c9: 20 20 20 20 
            20 20 20 53 
            54 52 20 00 tstr: db '       STR ',0
  600 03d5: 20 20 20 20 
            20 20 20 47 
            4c 4f 20 00 tglo: db '       GLO ',0
  601 03e1: 20 20 20 20 
            20 20 20 47 
            48 49 20 00 tghi: db '       GHI ',0
  602 03ed: 20 20 20 20 
            20 20 20 50 
            4c 4f 20 00 tplo: db '       PLO ',0
  603 03f9: 20 20 20 20 
            20 20 20 50 
            48 49 20 00 tphi: db '       PHI ',0
  604 0405: 20 20 20 20 
            20 20 20 53 
            45 50 20 00 tsep: db '       SEP ',0
  605 0411: 20 20 20 20 
            20 20 20 53 
            45 58 20 00 tsex: db '       SEX ',0			
  606 041d: 20 20 20 20 
            20 20 20 49 
            52 58 0d 0a 
            00          tirx: db '       IRX',13,10,0	
  607 042a: 20 20 20 20 
            20 20 20 4f 
            55 54 20 00 tout: db '       OUT ',0
  608 0436: 20 20 20 20 
            20 20 20 49 
            4e 50 20 00 tinp: db '       INP ',0		
  609 0442: 20 20 20 20 
            20 20 20 3f 
            3f 3f 0d 0a 
            00          twhat: db '       ???',13,10,0
  610 044f: 42 52 20 42 
            51 20 42 5a 
            20 42 44 46 
            42 31 20 42 
            32 20 42 33 
            20 42 34 20 
            42 4d 20 42 
            4e 51 42 4e 
            5a 42 4e 46 
            42 4e 31 42 
            4e 32 42 4e 
            33 42 4e 34 btable:	db 'BR BQ BZ BDFB1 B2 B3 B4 BM BNQBNZBNFBN1BN2BN3BN4'
  611 047f: 52 45 54 20 
            44 49 53 20 
            4c 44 58 41 
            53 54 58 44 
            41 44 43 20 
            53 44 42 20 
            53 48 52 43 
            53 4d 42 20 
            53 41 56 20 
            4d 41 52 4b 
            52 45 51 20 
            53 45 51 20 
            41 44 43 49 
            53 44 42 49 
            53 48 4c 43 
            53 4d 42 49 i7tbl:	db 'RET DIS LDXASTXDADC SDB SHRCSMB SAV MARKREQ SEQ ADCISDBISHLCSMBI'
  612 04bf: 4c 42 52 20 
            4c 42 51 20 
            4c 42 5a 20 
            4c 42 44 46 
            4e 4f 50 20 
            4c 53 4e 51 
            4c 53 4e 5a 
            4c 53 4e 46 
            4e 4c 42 52 
            4c 42 4e 51 
            4c 42 4e 5a 
            4c 42 4e 46 
            4c 53 49 45 
            4c 53 51 20 
            4c 53 5a 20 
            4c 53 44 46 cbtable:	db 'LBR LBQ LBZ LBDFNOP LSNQLSNZLSNFNLBRLBNQLBNZLBNFLSIELSQ LSZ LSDF'
  613 04ff: 4c 44 58 4f 
            52 20 41 4e 
            44 58 4f 52 
            41 44 44 53 
            44 20 53 48 
            52 53 4d 20 
            4c 44 49 4f 
            52 49 41 4e 
            49 58 52 49 
            41 44 49 53 
            44 49 53 48 
            4c 53 4d 49 iftbl:	db 'LDXOR ANDXORADDSD SHRSM LDIORIANIXRIADISDISHLSMI'	
  614 052f:             
  615 052f:             
  616 052f:             
  617 052f:             	
  618 052f:             stacktop:  equ	$+300h
  619 052f:             	end top
  620 052f:             	

620 Lines assembled
0 Errors
121 Labels
Object Code:1327 bytes

