


Last Updated: February 1, 2016
Edited by: Kevin Dezuzio

Membership Card Serial Monitor Program Ver. 1.5

NOTE: Tiny Basic by Tom Pittman Copyright 1982
NOTE: Membership Card Serial Monitor Program by Charles J, Yakym Copyright 2015
NOTE: The 1802 Membership Card Kit by Lee Hart, Copyrighted 2006
NOTE: This Software was written to be used on 	Lee Hart's Membership Card Rev. G. or above. 
The Membership Card Kit can be purchased by contacting Lee at leeahart@earthlink.net
	
Please free feel to contact me if you have any problems and/or suggestions on how to use or improve this program. If you use this software and find any changes that this user manual needs or should be changed please feel free to contact me at The--Eagle@sbcglobal.net or at The-Eagle@att.net.
		
NOTE: This program can run from either ROM or RAM memory. If run from ROM it MUST see additional 
RAM memory as well.

	The Membership Card Serial Monitor program Ver. 1.x is loaded in at location 0000H using the 0000H version Monitor file or at location 8000h version by using the 8000h Monitor file. Now one can either manually input the code (very time consuming), use the Bin Loader software below or burn the bin file into an EPROM/ROM. If you have burned it in an EPROM/ROM of this monitor program and you have a Membership Card Rev. G or above then just install the EPROM/ROM into U2 memory and IF you have the additional 32K RAM memory chip installed at U8 then run it. Make sure that the P2 and P3 memory jumpers on the Membership Card matches your ROM type installed.

U2 NOTES:
If U2 is configured to be the lower 32K half of memory then you have to use the 0000h monitor bin file.
	If you install this monitor program in ROM at U2 and install it as above, 
		then you MUST have RAM memory in U8 IC location.
	If you install this monitor program in RAM at U2 and install it as above, 
		then you do not need RAM memory in U8 IC location.

If U2 is configured to be the upper 32K half of memory then you have to use the 8000h monitor bin file. Then jump (C0 80 00) to run it.
		
	If you install this monitor program in ROM at U2 and install it as above, 
		then you MUST have RAM memory in U8 IC location.	
	If you install this monitor program in RAM at U2 and install it as above, 
		then you do not need RAM memory in U8 IC location.	

Memory Overview:
Available memory configurations on the Membership Card Rev. G or above
1. 32K RAM (use the 0000H.bin file only)
2. 64K RAM (use the 0000H.bin or the 8000H.bin file)
3. Lower 32K ROM with Upper 32K RAM (Either 0000H.bin in ROM only + RAM memory or 8000H.bin when running from RAM)
4. Lower 32K RAM with Upper 32K ROM (8000H.bin in ROM only + RAM memory or 0000H.bin when running from RAM)
NOTE: In configuration #3, the user must find a way to load the 8000H.bin into address 8000H, such as using ELF-LINK.EXE over the parallel port or AutoLoader hardware.

	There are two versions of this monitor, which are basically identical to each other except for where Tiny Basic’s workspace memory and the user memory are located at.

If the monitor is run from RAM,
0000H.bin Tiny Basic workspace is at 2000H and the user program begins at 2100H
8000H.bin Tiny Basic workspace is at A000H and the user program begins at A100H

If the monitor is run from ROM, (You MUST have additional RAM in your system)
0000H.bin Tiny Basic workspace is at 8000H and the user program begins at 8100H
8000H.bin Tiny Basic workspace is at 0000H and the user program begins at 0100H

The two versions are named; 0000H.BIN and 8000H.BIN. Depending on how your Membership Card’s memory is configured determines which BIN file you need to use. See above Memory Overview.

If you haven’t burned or obtained the monitor program in a ROM, you can still load it using the 
Bin Loader Software below. 

Bin Loader Software: Used ONLY for loading the 0000H.bin file
Note: Used ONLY with Memory configuration #1, #2 and #4.

	INVERTED LOGIC - /EF3 when idle is at VCC level
	OPCODE LISTING OF THIS PROGRAM, (67 BYTES LONG)
	0000	90 B4 A4 A5 F8 20 B5 E4 72 55 15 84 3A 08 F8 20
	0010	B0 3E 11 36 13 F8 00 B2 92 A2 E2 C4 C4 FC 01 3E
	0020	1D B3 36 22 F8 FF 52 93 3E 28 F6 38 93 FF 01 3A
	0030	2D 36 34 38 F6 02 76 52 C3 20 2C 64 93 FF 01 3A
	0040	3D 30 22

	NORMAL LOGIC - /EF3 when idle is at VSS level
	OPCODE LISTING OF THIS PROGRAM, (67 BYTES LONG)
	0000	90 B4 A4 A5 F8 20 B5 E4 72 55 15 84 3A 08 F8 20
	0010	B0 36 11 3E 13 F8 00 B2 92 A2 E2 C4 C4 FC 01 36
	0020	1D B3 3E 22 F8 FF 52 93 36 28 F6 38 93 FF 01 3A
	0030	2D 3E 34 38 F6 02 76 52 C3 20 2C 64 93 FF 01 3A
	0040	3D 30 22



Bin Loader Software: Used ONLY for loading the 8000H.bin file
Note: Used ONLY with Memory configuration #2.

	INVERTED LOGIC - /EF3 when idle is at VCC level
	OPCODE LISTING OF THIS PROGRAM, (67 BYTES LONG)
 	0000 90 B4 A4 A5 F8 A0 B5 E4 72 55 15 84 3A 08 F8 A0
	0010 B0 3E 11 36 13 F8 80 B2 FE A2 E2 C4 C4 FC 01 3E
	0020 1D B3 36 22 F8 FF 52 93 3E 28 F6 38 93 FF 01 3A
	0030 2D 36 34 38 F6 02 76 52 C3 A0 2C 64 93 FF 01 3A
	0040 3D 30 22

	NORMAL LOGIC - /EF3 when idle is at VSS level
	OPCODE LISTING OF THIS PROGRAM, (67 BYTES LONG)
	0000 90 B4 A4 A5 F8 A0 B5 E4 72 55 15 84 3A 08 F8 A0
	0010 B0 36 11 3E 13 F8 80 B2 FE A2 E2 C4 C4 FC 01 36
	0020 1D B3 3E 22 F8 FF 52 93 36 28 F6 38 93 FF 01 3A
	0030 2D 3E 34 38 F6 02 76 52 C3 A0 2C 64 93 FF 01 3A
	0040 3D 30 22

	If you are wondering about which Bin Loader Software you should use for your Membership Card, all you have to do is attach your serial hardware between your computer/laptop to the Membership Card. Then use a voltage meter and check the voltage on the /EF3 line. If the measured voltage is near zero (GND) then use the “Normal Logic” Bin Loader software, if the measured voltage is +5VDC or slightly less then use the “Inverted Logic” Bin Loader software.
	If you don’t have a voltmeter then you can run this program to determine if you are using inverted or normal RS-232:

 0000: 36 05 7A 30 02 7B 30 05

If Q LED in turned on you are using NORMAL RS-232 logic, if the Q LED stays off then you are using INVERTED RS-232 logic.
 
	Now that you know whatever you are using “normal” or “inverted” RS-232 logic use the appropriate bin loader software from above to load either the 0000h.bin or 8000h.bin file.

INSTRUCTIONS ON HOW TO LOAD THE MEMBERSHIP CARD MONITOR PROGRAM VER 1.5 
1. Manually load either the INVERTED LOGIC or the NORMAL LOGIC software that matches your hardware.
2. Run the Bin Loader Software that matches your memory and serial configuration.
3. Press the SPACEBAR on your terminal program. Use any baud rate from 1200 to 9600 ONLY.
4. Now SEND the 0000H.bin or 8000H.bin file from your terminal program to the serial port.
	NOTE - The LED'S on the Front Panel will display each byte that has been transferred.
	When the Monitor program has been completely loaded into the Membership Card
	The LEDS on the Front Panel should display a HEX “0F” (00001111).
5. After the transfer is complete, 

NOTE: If you are using the 8000H.bin version above then you must jump to address 8000H to run it.
Load “C0 80 00” in at address 0000 and Run it. Go to step #7.

6. Reset and Restart your Membership Card.
7. Now hit the ENTER key from your terminal program.
	NOTE - You now should be seeing the Membership Card Monitor Command Prompt.

NOTE: ALL keyboard depressions from your terminal/program are echoed to the LED's (OUT 4) on the Membership Card's Front Panel. 

NOTE: ALL commands and Hex values in the Monitor are capitalized.

Now you should see "Membership Card's Serial Monitor Ver. 1.x <CR> Enter "H" for Help". If you press an "H" then you will be viewing the commands and formats for each of them that are available while using this Monitor program.

	The following commands are available, "M" reads from memory, "W" writes to memory, "T" transfers (copies) bytes located at a memory location to another, "R" Executes (RUNs)a program starting at the inputted address (PC=0, Q=0, X=0), "V" view 1802 registers, "S" save user program, "L" load user program, "D" disassembler, "B" Tiny Basic, "C" save a Tiny Basic Program, “I” load a Tiny Basic Program.

	I know that the program is a little long but it includes just about 2K of text to be displayed to the user (the Help text, input error text, main prompt text, disassembler mnemonics, etc.etc.). 

	If you have gone this far to have a RS-232 port attached to the Membership Card and has somehow installed this software here are some important things to remember when running this software.

Monitor Program Internal Serial I/O Routines:
	I tested this Monitor Program using the following baud rates 300 8N1, 1200 8N1, 2400 8N1, 4800 8N1 and 9600 8N1. If you see garbled characters on your terminal screen, reduce your baud rate.
NOTE: It Auto-Detects baud rate from 300 to 4800 baud. If the baud rate is any faster than 4800 then the Monitor Program will ASSUME that it is 9600 baud and that your Membership Card is running at a nominal clock speed of 1.8 Mhz.

NOTE: At all baud rates, the Monitor Program will automatically adjust itself internally to accommodate NORMAL or INVERTED RS-232 logic configuration that you are using to interface your PC to the Membership Card.


	The ESCAPE (ESC) key is used as a "BREAK" key and will stop processing your command when inputted into the command line. For example: a W1000 11 22 33<ESC> will only WRITE the data 11 and 22 into location starting at address 1000, the 33 data is ignored and not written into memory. This ESCAPE function is active on ALL commands that you input. When you use the ESCAPE key the last input value is ignored and will result in displaying a "Function Aborted" message.

	NOTE: ESCAPE is not always being checked for when the Monitor is performing a selected function,

	When using the "M" (read memory function) a input command of M1000b 0100<CR> will display 100 Hex (or 256 decimal) bytes of memory location starting at 1000 thru 10FF. The input command of M1000 80<CR>  will display the contents of memory location 1000 thru 107F. If the inputted value of the number of bytes to display equals zero then this function will be aborted.

	NOTE: If you want to abort the listing command while it is displaying the memory contents you MUST either press the "Input Key” (S11) on the Membership's Card front panel or hit any key on your terminal (software or hardware) keyboard, if you are using a key on/in your terminal program then you might have to press it a few times (or press and hold).This is because the serial input is checked part of the time.

	When using the "W" (write memory function) an input of W1000<CR> will result in a "Function Aborted" (No data to write). a W1000 11<CR> will write a value of 11 into location 1000. Now a W1000 11 22 33<ESC>, this will only write the 11 data into location 1000 and the data 22 into location 1001. The last 33 is ignored via the ESC key being pressed.

	When using the "T" (transfer memory) command it requires three values.For example the command T1000 2000 0100<CR>, will transfer the memory from 1000 to 2000 for 0100 Hex bytes (1000h thru 10FFh). If the inputted value of the number of bytes to transfer equals zero then this function will be aborted.

	When using the "R" (RUN) command it will transfer control over to your program. For example, R1000<CR> starts executing the code loaded into location 1000 with the Q line reset, X =0 and the program counter is set to R0, which would contain the start address of 1000. The CDP1802 registers will be preloaded with the values displayed using the “V”iew register command with the exception of R0 and R1. R0 is set by the “R”un command while the R1 register is set to the re-entry point of the monitor program for a software interrupt via the D1 opcode. Register values can be changed by using the “W”rite command. (A description of this follows below.) You can change R0 and R1 but they will be preloaded with the values stated below.

R0 = users inputted address as defined by the “R”un command.
R1 = a value of x47E, where x equals the base address of the Monitor Program plus 1.
	For example: Depending on which bin file of the Monitor Program that you are using the value of R1 will be different. If using the 0000h bin then R1 will equal 147Eh, and the 8000h bin then R1 will be 947Eh. This address in R1 is the re-entry point back into the Monitor Program. NOTE: If you decide to change the value of R1 while running your program and you wish to return to the monitor, then instead of using the D1 opcode to return, you MUST make a jump to address x47E (C0 x4 7E) to return if R1 is not restored.

Restrictions for your program using Break Points:
Register R4 and R5 can NOT be used as your program counter upon re-entry
Register R2 must point to RAM that has 5 available memory locations for storage upon returning.
Register R2 is used as a stack pointer upon return.
Register R2, can NOT point to a location that resides within the Monitor Program nor can it point to a memory location that is within the 64 bytes of the physical top of memory in your system.
NOTE: Using the 0000h monitor bin file, the Monitor Program resides from 0000h thru 1FFFh.
NOTE: Using the 8000h monitor bin file, the Monitor Program resides from 8000h thru 9FFFh.
NOTE: The last 64 bytes of the top of physical RAM memory is reserved by the monitor for its scratchpad area. If your program changes any value stored other than the register values in this area then the Monitor Program may crash.
NOTE: If you change the value in R1 then you must return via a jump as describe above.

Changing registers using the “W”rite command prior to using the “R”un command:
	To change the value of a register, all you have to do is to write the value into the following memory locations.  NOTE: “XX” below refers to the last memory page of the top of your physical RAM memory address available. 
For example:
Using a lower 32K RAM system only then “XX” equals 7Fh
Using a 64K RAM system only then “XX” equals FFh
Using a lower 32K RAM with an upper 32K ROM then “XX” equals 7Fh
Using a lower 32K ROM with an upper 32K RAM then “XX” equals FFh

Address		Register
 XXFF		D
XXFE		T
XXFD		X
XXFC		P
XXDB		DF
XXDC-XXDD	R0
XXDE-XXDF	R1	
XXE0-XXE1	R2
XXE2-XXE3	R3
XXE4-XXE5	R4
XXE6-XXE7	R5
XXE8-XXE9	R6
XXEA-XXEB	R7
XXEC-XXED	R8
XXEE-XXEF	R9
XXF0-XXF1	RA
XXF2-XXF3	RB
XXF4-XXF5	RC
XXF6-XXF7	RD
XXF8-XXF9	RE
XXFA-XXFB	RF
HIGH-LOW register

	
Inserting Breakpoints: 
	Break Points are a software interrupt set by the “D1” (SEP R1) opcode being inserted into your program. Upon executing the D1 opcode your program will return to the Monitor Program and you can then view the registers by using the “V”iew command. Remember that if your program changes R1, then you must jump back to the re-entry point (x47Eh).

Sample test program:
F8 12 B3 F8 34 A3 F8 40 B2 F8 00 A2 F8 80 FE D1

	This sample program will load R3 with a value of 1234h then load R2 with a stack pointer value of 4000h then sets the DF register to equal 1 then returns to the Monitor Program via the D1 opcode. You can now use the “V”iew registers to see that this change has been made. You will notice that when using the “V”iew command that it will always display the following values: T=21h, X=2, and P=1. However, if you replace the D1 opcode with a direct jump (C0 x4 7E) then the P register will reflect your program counter register correctly. X remains R2 no matter which way you return to the Monitor Program. NOTE: The P register is labeled PC (Program Counter) in the “V”iew command.

	When using the "V" (view) command, remember that it only displays the random contents of the memory where they are stored in the scratchpad area at the time of entering this Monitor program. If this Monitor was started from its base address (x000h), then register RE will always show the baud rate delay value plus the RS-232 baud rate info and polarity that the user is using.  If this Monitor is re-entered via an software interrupt from a user program called by the "R" command it will display the correct values of all resisters. See the “R”un command for more information.

	When using the "L" (LOAD) user program command, It will display the following message "Ready to LOAD program". At this moment IF you decide not to load a program, you can just press the <ESC> Escape key to abort this function otherwise you MUST press the ENTER/RETURN key (<CR>) to start the load process. Once the file transfer has begun, you can NOT abort this function. You use the "Send" or “ASCII Upload” command of your terminal program to load the user program in with. After your file has been loaded in, this monitor should display "File Loaded Successfully" or display any error that may have been detected. Only files in I8HEX file format are understood by this command.

	When using the “I” load a Tiny Basic program command , it works just like the “L” (LOAD) command except that the file must be in ASCII form and NOT I8HEX format.

NOTE: Prior to using this command, you MUST have “Cold” started Tiny Basic then returned back to the Monitor Program. This will load up the 256 byte Tiny Basic workspace needed for this function to work correctly.  This function needs to see a non-corrupted Tiny Basic workspace memory page so it knows where to load your Basic program in at.
  
NOTE: Any Tiny Basic program loaded in the Monitor Program MUST have the last line in the Tiny Basic program file a line number of 0. See below

Tiny Basic Program listing:
10 LET A=0
20 LET B=B+A
30 PRINT B
40 LET A=A+1
50 GOTO 20
60 END
0
	The last line number of zero tells the Monitor Program that the end of the file has been reached. 
If there is no line number 0 then the Monitor Program will hang and will need to be restarted.
NOTE: When you save a Tiny Basic program from the Monitor Program it will automatically insert a last line with a line number of zero for you.

NOTE: If you plan on “loading” Intel Hex I8HEX format files or Tiny Basic programs into your system, then please do the following,
Under the “Send” tab in the Realterm terminal program, set to “Delays” as follows:
For a 9600 baud rate, it "MUST" be equal to or greater that a value of 5.
For a 4800 baud rate, it "MUST" be equal to or greater that a value of 10.
For a 1200 or 2400 baud rate, it “MUST” be equal to or greater than a value of 15.
For a 300 baud rate, it “MUST” be equal to or greater than a value of 50.
Any lower “Delays” values may cause the Monitor Program to crash or not load the file correctly If that happens, then  you may have to restart the Monitor Program. The above values are where I tested the load functions at, however due to the many factors that can effect these values, you may have to change them so they match your computer to Membership Card timing requirements needed for the load function. 
NOTE: These delay values aren’t needed for the save function. 

	When using the "S" (SAVE) user program command, It will display the following message "Ready to SAVE program". At this moment IF you decide not to SAVE a program, you can just press the <ESC> Escape key WITHIN about 15 seconds or less to abort this function. Once the file transfer has begun, you can NOT abort this function. You use the "Capture" command of your terminal program to save the user program with. After your file has been saved, this monitor should display "File Saved Successfully". Be sure to end the capture and truncate any unnecessary text at the end of the capture file such as the “File Saved Successfully” text.

	The format for the Save command is "Saaaa bbbb<CR>, where aaaa is the starting address to save from and bbbb is for how many bytes followed by a <CR> Return key. The data transmitted to your terminal program is in I8HEX file format.

Here is a detailed explanation of the Save command.

	After you have selected the "Save function by pressing "S", the output LEDs on your system should be displaying "FF". This will be displayed for about 15 seconds. During this time you can do one of two things, you can abort this function by pressing the <ESC> Escape key or use this time to set up your terminal program to "Capture" a file from the serial port. If you fail to do anything during these 15 seconds, then your terminal program will display the data sent to it by the
Save command. This data displayed on your screen should be considered unusable and meaningless.

	If you have told your terminal program to capture the data, then after the first 15 seconds your system LEDs will start displaying the binary form of the characters sent to your terminal program to be captured.
	  
	After the Save command is done sending your program, the output LED's on your system will start blinking from "FF" (all ON) and then to "00" (all OFF). This is to let you know that the file has been sent correctly and that you should tell your terminal program to stop capturing the data. Once you have done that then just press any key on your terminal to return back to the Serial Monitor's command prompt.

	When using the "C" save Tiny Basic user program command, like the "S" command, it will display the following message "Ready to SAVE program". At this moment IF you decide not to SAVE a program, you can just press the <ESC> Escape key WITHIN about 15 seconds or less to abort this function. Once the file transfer has begun, you can NOT abort this function. You use the "Capture" command of your terminal program to save the user program with. After your file has been saved, this monitor should display "File Saved Successfully". The Tiny Basic user program is saved as an ASCII only text file and not an I8HEX format. 
	
	NOTE: A Tiny Basic program saved from a 0000h addressed Monitor Program will  run and from a 8000h addressed Monitor Program and vice versa. Keep in mind, if USR commands are used, they may need to be converted to work in the appropriate RAM/ROM configuration. 

	When using the "D" (disassembler function) the outputted display will be in the following format: AAAA O M X, where "AAAA" is the address being disassembled, "O" is the complete command Opcode, "M" is the Mnemonic, "X" is any other information needed to complete the disassembly of the Opcode. For example, if you disassemble the following RCA opcodes 7B, F8, 10, A8 from starting address 8000h, the displayed output will be as follows:

NOTE: IF your ending address is greater than 32K higher than your starting address, the disassembler will only disassemble the starting address opcode and then return you to the monitor’s main command prompt.

8000 7B     SEQ
8001 F810   LDI 10
8003 A8     PLO R8

The Format for using the "D" disassembler command is Daaaa bbbb<CR>
Where aaaa is your starting address and bbbb is the ending address
If the inputted ending address is equal to or less than your starting address OR your ending address is 0000h the Disassembler will enter into the Single Step Mode.

Disassembler Modes:
	Auto/Normal Mode: 
		This will automatically display the disassembled results from the inputted starting address to the ending address inputted.  NOTE: If you want to abort the disassembler command while it is displaying the disassembly contents you MUST either press the "Input Key (S11) on the Membership's Card front panel or hit any key on your terminal keyboard. If you are using a key on/in your terminal program then you might have to press it a few times, this is because of the limited timing of when the serial input is checked.

	Single Step Mode:
		There are three ways to automatically enter the Single Step Mode. It is entered by entering an ending address that is either equal to your starting address, less than your starting address, or an ending address that is 0000h. Another easy method to invoke single step mode is to type “D0000 “ to debug from address 0000. (Note the space following the last zero).This Mode will display the disassembled output one opcode at a time and wait for a user input to continue. After the disassembly is displayed the disassembler is waiting for one of two things to happen. If you hit the <ESC> Escape key the disassembler is aborted and returns you back to the monitor’s main command prompt while any other key depression will continue to disassemble the next opcode. To keep the display "clean" looking, your key depressions are not echoed back to the terminal screen while in the Single Step Mode but they are displayed on the Membership Card's Front panel LED's.

NOTE: If you want to personally test the Disassembler and see all the possible mnemonics that it will generate, then do the following command from the Monitor's command prompt. 
DxEB6  xFDB<CR>: NOTE "x" equals the high order base address plus 1 of the monitor program.

So the command for the 0000h Monitor would be: D1EB6 1FDB<CR> and for the 8000h Monitor it would be D9EB6 9FDB<CR>


TINY BASIC

	To enter Tiny Basic, enter the "B" command. The monitor program will prompt you if you want to do a Cold or Warm start of Tiny Basic. At this point; if you decide not to enter Tiny Basic, just press the <ESC> Escape key to abort this function.

NOTE: All Tiny Basic commands are in Capital letters only.

Cold Start
	Upon entry into basic, it will reset all of its internal pointers and size memory to make all RAM memory available for use for your Basic program, except for the lowest 256 bytes which are reserved for Tiny Basic workspace area.
NOTE: You must Cold Start Tiny Basic BEFORE you use the “C” save or “I” load a Tiny Basic user program
into or from the Monitor Program.

Warm Start
	It is assumed that you already ran a cold start initialization and have loaded a Basic program into memory that is ready to be ran or edited.
NOTE: If you are in the monitor program and you used the "C" save your Tiny Basic program, then you can use the "I" load command to load your saved Tiny Basic then right afterwards you can enter Tiny Basic using the Warm start and your program is ready to run.

BREAK detection
	While running a Tiny Basic program, you can "BREAK" out of its currently execution by one of two means. 
1. By rapidly/repeating a key input from your terminal program or
2. By depressing the Input button on the Membership Card front panel.

The USR function within Tiny Basic
	There are 8 embedded USR functions within Tiny Basic, they are as follows:

USR(0) - EXIT AND COLD START FUNCTION - 8000h Monitor users ONLY must use USR(-32768)
	Format: variable=USR(0)
Example program:
10 A=USR(0)                                                                          
NOTE: This exit Tiny Basic and does a Cold start of the Membership Card Serial Monitor Program. Upon re-entry into the monitor program you MUST depress the <CR> Return key to reset the monitor program.         


USR(3) - EXIT FUNCTION - 8000h Monitor users ONLY must use USR(-32765)
	Format: variable=USR(3)
Example program:
10 A=USR(3)                                                                          
NOTE: This exit Tiny Basic and turns control back to the Membership Card Serial Monitor Program and functions as a warm start of the Monitor.    

USR(6) - INPUT FUNCTION - 8000h Monitor users ONLY must use USR(-32762)
	Format: variable=USR(6)
The "variable" now contains the decimal value of the key pressed
NOTE: The input routine will automatically display the key pressed as well.
Example program:
10 LET A=USR(6)
20 PRINT A
30 IF A=13 THEN GOTO 50
40 GOTO 10
50 END
If you run the above program and press just the "A" key, then Tiny Basic will appear to display: A65.  The "A" displayed is a function of the Input routine and NOT Tiny Basic. Tiny Basic responds by displaying only the "65".
	
USR(9) - OUTPUT FUNCTION - 8000h Monitor users ONLY must use USR(-32759)
	Format: variable=USR(9,N)
Where "N" equal value to print
Example program:
10 B=32                                                                          
20 A=USR(9,B)                                                                   
30 LET B=B+1                                                                    
40 IF B=128 THEN GOTO 60                                                        
50 GOTO 20                                                                      
60 END  
NOTE: This program only prints the available ASCII characters

USR(20) - PEEK FUNCTION - 8000h Monitor users must use USR(-32748)
	Format: variable=USR(20,N)
The "variable" now contains the decimal value of the BYTE stored at address N
Example Program:
10 B=0                                                                          
20 A=USR(20,B)                                                                  
30 PRINT A                                                                      
40 END      

USR(24) - POKE FUNCTION - 8000h Monitor users must use USR(-32744)
	Format: variable=USR(24,address,N)
Where “address” equals decimal value of the address to store "N" at.
NOTE: Address values above 7FFFh are negative numbers
Example Program:
10 B=0
20 c=32                                                                          
30 A=USR(24,B,c)                                                                  
40 END
NOTE: This program will load a value of 32 into location 0   
NOTE: If B = -28672 then a value of 32 into location 9000h

USR(32) - MEMBERSHIP CARD FRONT PANEL LED OUTPUT FUNCTION - 8000h Monitor users must use USR(-32736)
	Format: variable=USR(32,N)
Where "N" equal value to print
Example program:
10 B=255                                                                          
20 A=USR(32,B)                                                                   
30 END  
NOTE: This will turn on all the front panel LED's

USR(35) - MEMBERSHIP CARD FRONT PANEL SWITCHES READ FUNCTION - 8000h Monitor users must use USR(-32733)
	Format: variable=USR(35)
Example program:
10 A=USR(35)                                                                          
20 PRINT A                                                                   
30 END  
NOTE: This will display the decimal value of the Binary value of the switch settings
on the Membership Card Front Panel


NOTE: Some parts of Tiny Basic and this Monitor also scans the (S11) Input button (/EF4 line) on the Front Panel of the Membership Card along with the /EF3 line (serial input line) to abort some commands while they are being executed.


In all input commands, the leading zeros do not need to be inserted. For example, the following two command inputs are the same.

M0100 0005<CR>
M100 5<CR>

A FURTHER EXPLAINATION OF THE COMMAND FORMATS
aaaa, bbbb, cccc Means that the monitor will see/allow only up to the last 4 characters inputted. For example the command value of 01234 and 821234 will be understood as a hexadecimal value of 1234 being inputted, which are only up to the last 4 characters inputted. If an inputted value is less than 	4 characters long the monitor will add leading zeros to form the 4 digit value

dd Means that the monitor will see/allow only up to the last 2 characters inputted. For example the value of 234 and 34 will be understood as a hexadecimal value of 34 being inputted, which are only up to the last 2 characters inputted. An inputted value of 1 character the monitor will add a leading zero to form the 2 digit value (“01” in this case).

<CR> Means to press the "Return or Enter" key on your keyboard

	ALL inputs must be in CAPITAL letters; lower case letters are ignored.
	
	While at the Command Prompt, all inputted characters are echoed to the output

	The following are the only keys that are understood by this Monitor, “0" thru "9", "A" thru "F", Escape <ESC>, Space <SP>, Return <CR> keys, and Menu commands (M,W,S,L,T,R,V,D,B,C,I,H) while all other keys are ignored.
 

NOTE: The following doesn’t apply when using “BreakPoints” in your program to return to the Monitor Program.
	If you use the "R”un command in this Monitor to run your own program and you want to re-enter this Monitor (at its base address) from your program, then you MUST follow these requirements. Upon re-entry at its base address, You MUST hit the Return <CR> key on your keyboard to reset the Bit timing value. After I re-structure the internal layout of Monitor Program I will add a section on how to use some of its internal routines from your program.
 
Software Warranty
	The Monitor Program software is a "work" in progress. Therefore there is NO warranty what-so-ever. I have personally run it on, Lee Hart's Membership Card Rev. G, Netronics ELF II system, and my 1802 (64K) test platform without any errors.

	
Enjoy,
Chuck Yakym

P.s. I am currently using this monitor program to allow me to use my PC laptop to act as a display and keyboard for the Membership Card via RealTerm (terminal program). Realterm is FREE and available at the following website: http://sourceforge.net/projects/realterm. I also use a TRENDnet TU-S9 (USB to Serial adapter which is available at http://www.amazon.com) to connect via the RS-232 circuit on Membership Card Rev. G.

