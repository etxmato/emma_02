<?xml version="1.0"?>
<!DOCTYPE emmaconfig SYSTEM "emma02.dtd">

<!-- always use root tag <emmaconfig> -->
<emmaconfig>
    
    <!--
    <system>: basic system information
    <bootstrap>: bootstrap definition
    <frontpanel>: front panel definition, for elf, elf2 or super panel
    <memory>: memory map definition
    <disk>: disk (ide / fdc) definition
    <video>: video definition
    <keyboard>: keyboard definition
    <keypad>: keypad definition for the elf, elf 2 and super elf
    <bitkeypad>: keypad definition for a keypad using one bit per key
    <efbuttons>: key definition connected to EF flags
    <vt>: video terminal definition
    <printer>: printer definition
    <cassette>: cassette definition
    <xmodem />: activate xmodem on startup
    <sound>: sound definition
    <dip>: dip switch definition
    <rtc>: real time clock definition
    <usb>: COMX SuperBoad configuration and simpulation

    decimal or hexadecimal (starting with 0x) numbers are supported
    -->
    <system>
        <!-- always specify <system> tag first, clock, dirname and name tags are mandatory
        <name>: extended machine name
        <clock>: system clock speec
        <boot>: boot address, if not specified the computer will not start unless automatically
        <init type="efX">: set initialization value of unused EF flags, X can be 1 to 4, value 0 or 1
        <dma out="q">: after every specified number of cpu cycles generate a dmaOut, if out="q" is use dmaOut will start after the first q pulsem in="x" with x being a number on OUT x otherwise on startup
        <int>: after every specified number of cpu cycles generate an interrupt
        <dirname>: main directory name
        <statusbar>: use statusbar; options: comx, diag & cidelsa
        -->
        <name>DIY Elf</name>
        <clock>4.0</clock>
        <boot>0xFF00</boot>
        <init type="ef1">1</init>
        <init type="ef2">1</init>
        <init type="ef3">1</init>
        <init type="ef4">1</init>
        <dirname>Elf</dirname>
    </system>
    
    <basic>
        <pload>super</pload>
        <defus>0x4281</defus>
        <eop>0x4283</eop>
        <string>0x4292</string>
        <array>0x4294</array>
        <eod>0x4299</eod>
        <ram>0x4400</ram>
    </basic>
    
    <iogroup> <!-- define output port to change iogroup to expand number of I/O port options -->
        <out mask="0x1e">2</out> <!-- port is defined by the specified value (1 in this example), mask is used to identify the used bits -->
    </iogroup>
    
    <bootstrap>
        <!--
        <address>: specify bootstrap address, e.g. when 0x8000 is specified ROM connected to 0x8000 will be switched to address 0 on startup. When bootstrap is released via out, in or read instruction ROM is switched to specified location only. When no <out> or <in> port is specified, bootstrap release is done on the first memory read instruction on an address >= as the specified bootstrap address.
        <out>: output port to release bootstrap
        <in>: input port to release bootstrap
        <io>: output & input port to release bootstrap
        
        It is possible to define a bootstrap in, out or io while using the same input or output port for other HW.
         -->

        <address>0x8000</address>
        <out>1</out>
        <in>1</in>
    </bootstrap>

    <frontpanel type="netronics" init="off">
        <!-- front panel definition, type specifies cosmac, netronics, quest, microtutor or microtutor2. panel init specifies if front panel should be 'on' or 'off' on startup (default is off).
        <out>: output port for til display
        <in>: input port to read hex keyboard or switch panel for Elf
        <ef type="ready">: ef port for data ready signal hex keypad (not for Elf, use <keypad> instead!
        <ef type="in">: ef port for in button

        <led>: show Cosmac Elf LED module panel using specified number as output port
        <til>: TIL type, 311 or 313 (not used for microtutor's)
        -->

        <out>4</out>
        <in>4</in>
        <til>311</til>
        <led />
        <ef type="ready">3</ef>
        <ef type="in">3</ef>
    </frontpanel>

    <memory>
        <!--
        <rom mask="0xZZZZ">: definition of a rom segment, mutliple definitions are supported
        <mainram mask="0xZZZZ">: definition of the main ram segment, if a filename is specified it will be shown on the GUI. Only one definition is supported. For additional segments use <ram>
        <ram mask="0xZZZZ">: definition of a ram segment, mutliple definitions are supported
        <copy>:copy or duplicate part of memory to a second memory location
        <slot max="4">:  define memory slot's, max specifies the maximum number of slots
        <ems type="RyM">: definition of an ems (extended memory system) segment of either type RAM or ROM, mutliple definitions are supported
        <mapper>: definition of a 1 MB RAM mapper using a port extender, only one definition is supported.
        <giant>: definition for giantboard mapping at 0xF000-0xFFFF. Note this overwrites all other memory options.
        <diagrom>: definition for COMX diagnostic board ROM used from 0-0xFFF replacing COMX system ROM when active.

        mask="0xZZZZ": When used for rom, mainram and ram, memory type will be mapped to other locations using the specified mask (smaller than size of the segment). E.g. is <ram mask="0x3fff" is used ram would be mapped every 1K. When specifying mask=0, or when not specified, no mask will be used.
        
        common sub tags:
        <start>: start location in main memory
        <end>: end location in main memory
        <dirname>: location of file (filename) which is loaded on startup, this is defined as sub folder of the main Emma 02 data folder
        <filename>: name of file which is loaded on startup

        data folder location:
        Windows Vista and later: C:\Users\username\AppData\Roaming\Emma 02
        XP: C:\Documents and Settings\username\Application Data\Emma 02
        Mac OSX: ~/Emma 02
        Linux: ~/emma_02_data
        
        Note that when an older versions of Emma 02 was used previously the default data directory might be set to:
        Mac OSX: ~/Documents/emma_02
        Linux: ~/Documents/emma_02
        -->

        <rom mask="0xffff">
            <start>0xf800</start>
            <end>0xFFFF</end>
            <filename verify="true">bios.1.0.4.rom</filename>
        </rom>

        <mainram mask="0x3fff">
            <start>0x0000</start>
            <end>0x3FFF</end>
        </mainram>

        <ram mask="0x3fff">
            <start>0x4000</start>
            <end>0x7FFF</end>
        </ram>
        
        <copy start="0xdd0" end="0xddf" slot="0">0xc000</copy>      <!-- copy part of memory (from start-end and if defined in slot x) to specified address -->
        <copy start="0x1000" end="0x17ff" slot="-1">0xD000</copy>   <!-- example where slot is not used, i.e. specified as -1 -->

        <slot max="4">
            <!--
            <start>: start slot memory location
            <end>: end slot memory location
            <out type="bit" shift="1">: output port to switch memory slot, shift indicates number of bits value is shifted right. Type "bit" defines that every bit represents a memory slot. In example below: 0x2 = slot 0, 0x4 = slot 1, 0x8 = slot 2 and 0x10 = slot 3.
            <rom slot="0">: define specified slot as ROM and load specified <filename> with optional <dirname> to that slot/location
            <ram slot="3">: define specified slot as RAM
            -->
            
            <start>0xC000</start>
            <end>0xDFFF</end>
            <out type="bit" shift="1">1</out>
            <rom slot="0">
                <filename verify="true">fdc.bin</filename>
            </rom>
            <rom slot="1">
                <filename verify="true">f&amp;m.printer.1.2.bin</filename>
            </rom>
            <rom slot="2">
                <filename verify="true">80column.1.1.bin</filename>
            </rom>
            <ram slot="3">
            </ram>
        </slot>
        
        <ems type="RAM">
            <!--
            Next to the common tags ems also supports:
            <out mask="0x1f">: defines the output, address or address range used to switch page, using the specified mask. In this example with mask=0x1f the ems will be defined with 32 pages. When specifying mask=0 or leaving it out mask will be defined as 0xff. When specifying one digit (i.e. 0-9) an ouptut port (0-7) will be defined for switching the page. When specifying a hex value (e.g. 0xF000) the specified address will be defined for switching the page. When specifying a range (0xF000-0xF100) all addresses in the range will be defined for switching the page.
            -->
            <out mask="0x1f">6</out>
            <start>0x8000</start>
            <end>0xBFFF</end>
        </ems>

        <mapper mask="0x7ff">
            <!--
            <mapper> does not support <dirname> and <filename> tags
            Only one mapper can be defined per machine. Mask defines the size of each pager. In this exmple 0x7FF indicates pages of 2 KB. Where defined the mapper can switch in any 2 KB page from the mapper memory into a 2 KB main memory area. In example below the mapper starts at 0xC000 which with a mask of 0x7ff that would be defined by using extended port 0x18 (address 0 would be port 0, 0x800 port 1 etc.).
            
            Additional tags supported:
            <out type="select">: 1802 port number to select extended port
            <out type="write">: 1802 port number to write selected extended port
            <in>: 1802 port number to read selected extended port
            -->
            <start>0xC000</start>
            <end>0xE7FF</end>
            <out type="select">5</out>
            <out type="write">6</out>
            <in>6</in> 
        </mapper>
        
    </memory>
    
    <disk type="ide">
        <!-- disk definition for ide
        <filename>: ide filename
        <dirname>: location of ide file (filename) defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
        <out type="select">: output number to select ide port
        <out type="write">: output number to write to selected ide port
        <in type="status">: input number to read ide status
        <in type="read">: input number to read from selected ide port
        <tracks>: number of tracks
        <heads>: number of heads
        <sectors>: number of sectors
        -->

        <filename>mc6847.ide</filename>
        <out type="select">2</out>
        <out type="write">3</out>
        <in type="status">2</in>
        <in type="read">3</in>
        <tracks>512</tracks>
        <heads>4</heads>
        <sectors>26</sectors>
    </disk>

    <disk type="1770" drives="2">
        <!-- disk definition for fdc 1770 using 1 or 2 drives
        <filename  disk="0">: fdc filename for disk 0
        <dirname>: location of fdc file (filename) defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
        <iogroup>: iogroup, i.e. i/o ports are activate when specified iogroup is selected via the iogroup port
        <out type="select">: output number to select fdc port
        <out type="write">: output number to write to selected fdc port
        <in type="read">: input number to read from selected fdc port
        <in type="intrq">: input number to read intra
        <ef>: ef number for data request
        <sides>: number of disk sides
        <tracks>: number of tracks
        <sectors>: number of sectors
        <sectorlength>: sector length in bytes
        <maxfmtcount>: max format count, use 2740 for COMX drive with 16 sectors. Other values might not work.
        -->

        <iogroup>0x2</iogroup>
        <dirname>Comx/Disks</dirname>
        <filename disk="0">dos.1.4+f&amp;m.disk.tools.img</filename>
        <filename disk="1">f&amp;m-heijmans.sw.img</filename>
        <out type="select" q="1">2</out>
        <out type="write" q="0">2</out>
        <in type="read" q="0">2</in>
        <in type="intrq" q="1">2</in>
        <ef>4</ef>
        <sides>2</sides>
        <tracks>35</tracks>
        <sectors>16</sectors>
        <sectorlength>128</sectorlength>
        <maxfmtcount>2740</maxfmtcount>
    </disk>

    <disk type="1793" drives="2">
        <!-- disk definition for fdc 1793 using 1, 2, 3 or 4 drives
        <filename  disk="0">: fdc filename for disk 0
        <dirname>: location of fdc file (filename) defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
        <iogroup>: iogroup, i.e. i/o ports are activate when specified iogroup is selected via the iogroup port
        <out type="select">: output number to select fdc port
        <out type="write">: output number to write to selected fdc port
        <in type="read">: input number to read from selected fdc port
        <ef>: ef number for data request
        <sides>: number of disk sides
        <tracks>: number of tracks
        <sectors>: number of sectors
        <sectorlength>: sector length in bytes
        <maxfmtcount>: max format count, use 6256 for 18 sectors and 3128 for 9 sectors. Other values might not work.
        -->

        <iogroup>0x2</iogroup>
        <out type="select">2</out>
        <out type="write">3</out>
        <in type="read">3</in>
        <ef>2</ef>
        <sides>1</sides>
        <tracks>40</tracks>
        <sectors>18</sectors>
        <sectorlength>256</sectorlength>
        <maxfmtcount>6256</maxfmtcount>
    </disk>

    <video type="pixie">
        <!-- video definition for pixie / cdp 1861 chip, use <io> or <out>/<in> not both!
        <io type="off">: output & input number to disable graphics, i.e. set screen off
        <io type="on">: output & input number to enable graphics, i.e. set screen on
        <out>: output number to disable graphics
        <in>: input number to enable graphics
        <ef>: ef number for frame indicator
        <zoom>: set default zoom, when not specified 2.00 will be used
        <border>: set border size in pixels with format XxY, note that X should always be in steps of 3 pixels.
        <color type="fore">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
        <color type="back">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
        -->

        <out>1</out>
        <in>1</in>
        <ef>1</ef>
        <border>33x33</border>
        <color type="fore">255, 255, 255</color>
        <color type="back">0, 0, 0</color>
     </video>
     
     <video type="mc6845">
         <!-- video definition for the mc6845 chip
         <ram>: video ram definition in a range within the CPU memory map. Always specify a range in hex (0x) format
         <iogroup>: iogroup, i.e. i/o ports are activate when specified iogroup is selected via the iogroup port
         <font>: mc6845 binary font file
         <dirname>: location of font file (font) defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         <out type="register">: output number to select register, specified in hex (0x) and as an address location in the CPU memory map. Adding the mask option will allow using a range of addresses. In example below any even address from 0xE800-0xE8FF will be used to select register.
         <out type="data">: output number to write data to select register, specified in hex (0x) and as an address location in the CPU memory map. Adding the mask option will allow using a range of addresses.
         <in>: input number to enable graphics
         <ef>: ef number for display enable
         <screen>: define initial screen size in characters, e.g. 64x16 will define a screen of 64 characters wide and 16 lines. Note that screen size can be changed via out instructions.
         <char> define initial character size in pixels, e.g. 7x8 will define characters of 7 pixels wide and 8 pixels high. Note that charcater height can be changed via out instructions.
         <interlace />: set interlace option on
         <zoom>: set default zoom, when not specified 2.00 will be used
         <border>: set border size in pixels with format XxY
         <color type="fore">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="back">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         -->

         <ram>0xE000-0xE7FF</ram>
         <font>mc6845.comx.bin</font>
         <out type="register" mask="0xFF01">0xE800</out>
         <out type="data" mask="0xFF01">0xE801</out>
         <screen>64x16</screen>
         <char>8x8</char>
         <ef>2</ef>
         <interlace />
         <border>0x0</border>
         <color type="fore">0, 255, 0</color>
         <color type="back">0, 0x40, 0</color>
     </video>

     <video type="mc6847">
         <!-- video definition for the mc6847 chip
         <ram>: video ram definition in a range within the CPU memory map. Always specify a range in hex (0x) format
         <font>: mc6847 binary font file
         <dirname>: location of font file (font) defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         <out type="mode">: output number to select video mode either defined as an output port (0-7), CPU address (use hex, 0x value) or range (use hex, i.e. 0xFF00-0xFFFF).
         <inv>, <ext>, <css>, <as>, <gm0>, <gm1>, <gm2>, <ag>: function per bit number; us b0-b7 or 0-7 for bit 0 to 7 or use dd6 to dd11 for dd bits. Note dd8 to dd11 are the same as b0 to b3. When init="high" is used the bit will be initialized as 1 otherwise 0.
         <zoom>: set default zoom, when not specified 2.00 will be used
         <border>: set border size in pixels with format XxY
         <color type="color">: set specified color (see example below). Color is specified as red, green, blue all 3 values range from 0 to 255.
         -->

         <ram>0xE000-0xE3FF</ram>
         <font>mc6847.ntsc.round.bin</font>
         <out type="mode">5</out>
         <inv init="high">dd7</inv>
         <ext>dd6</ext>
         <css>b3</css>
         <as>b2</as>
         <gm0>b1</gm0>
         <gm1></gm1>
         <gm2></gm2>
         <ag>b0</ag>
         <color type="back">0, 0, 0</color>
         <color type="text_green">0, 0xff, 0</color>
         <color type="text_orange">0xff, 0xc4, 0x18</color>
         <color type="graph_green">0, 0xff, 0</color>
         <color type="graph_yellow">0xff, 0xff, 0</color>
         <color type="graph_blue">0, 0, 0xff</color>
         <color type="graph_red">0xff, 0, 0</color>
         <color type="graph_buff">0xff, 0xff, 0xff</color>
         <color type="graph_cyan">0, 0xff, 0xff</color>
         <color type="graph_magenta">0xff, 0, 0xff</color>
         <color type="graph_orange">0xff, 0xc4, 0x18</color>
     </video>

     <video type="tms9918">
         <!-- video definition for tms9918 chip
         <out type="register">: output number to select register
         <out type="data">: output number for data output
         <ef>: ef number for interrupt
         <zoom>: set default zoom, when not specified 2.00 will be used
         <border>: set border size in pixels with format XxY
         <color type="color">: set specified color (see example below). Color is specified as red, green, blue all 3 values range from 0 to 255.
         -->

         <out type="register">5</out>
         <out type="data">6</out>
         <ef>4</ef>
         <color type="transparant">0, 0, 0</color>
         <color type="black">0, 0, 0</color>
         <color type="medium_green">0x21, 0xc8, 0x42</color>
         <color type="light_green">0x5e, 0xdc, 0x78</color>
         <color type="dark_blue">0x54, 0x55, 0xed</color>
         <color type="light_blue">0x7d, 0x76, 0xfc</color>
         <color type="dark_red">0xd4, 0x52, 0x4d</color>
         <color type="aqua_blue">0x42, 0xeb, 0xf5</color>
         <color type="medium_red">0xfc, 0x55, 0x54</color>
         <color type="light_red">0xff, 0x79, 0x78</color>
         <color type="dark_yellow">0xd4, 0xc1, 0x54</color>
         <color type="light_yellow">0xe6, 0xce, 0x80</color>
         <color type="dark_green">0x21, 0xb0, 0x3b</color>
         <color type="purple">0xc9, 0x5b, 0xba</color>
         <color type="gray">0xcc, 0xcc, 0xcc</color>
         <color type="white">0xff, 0xff, 0xff</color>
     </video>

     <video type="intel8275">
         <!-- video definition for the intel 8275 chip - this option is not fully tested!
         <font>: intel 8275 binary font file
         <dirname>: location of font file (font) defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         <out type="command">: output number to select command
         <out type="parameter">: output number to write parameter
         <in type="status">: input number to read status
         <in type="parameter">: input number read parameter
         <ef>: ef number for vertical retrace
         <interlace />: set interlace option on
         <zoom>: set default zoom, when not specified 2.00 will be used
         <border>: set border size in pixels with format XxY
         <color type="fore">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="back">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="high">: set highlight color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         -->

         <font>intel8275.bin</font>
         <out type="command">5</out>
         <out type="parameter">1</out>
         <in type="status">5</in>
         <in type="parameter">1</in>
         <ef>1</ef>
         <interlace />
         <border>0x0</border>
         <color type="fore">0, 255, 0</color>
         <color type="back">0, 0x40, 0</color>
         <color type="high">0, 0xff, 0</color>
     </video>

     <video type="1870">
         <!-- video definition for the VIS 1870
         <iogroup>: iogroup, i.e. i/o ports are activate when specified iogroup is selected via the iogroup port
         <pagesize type="ram">: specify page memory as RAM with size 0x3ff or 0x7ff
         <pagesize type="rom">: specify page memory as RAM with size 0x3ff or 0x7ff, however when using type rom a ROM can be loaded/used at F800-FFFF
         <charsize type="ram">: specify charcater memory as RAM with size 0x3ff or 0x7ff
         <charsize type="rom">: specify charcater memory as ROM with size 0x3ff or 0x7ff
         <filename format="tmc">: load specified filename into character ROM using TMC format
         <pcbmask>: pcb mask 0x7f or 0xff
         <maxcharlines>: maximum number of character lines 8 or 16. When using PAL 9 lines are visible but 16 are reserved in character memory
         <maxscreenlines>: specify number of lines on one screen: 24, 25 or 27 for Cidelsa DRACO
         <mode>: video mode pal or ntsc
         <int>: VIS 1870 interrupt mode
         <ef type="display" pol="rev">: ef flag for non display period, pol="rev" reverts ef flag polarity
         <ef type="mode">: ef flag to select video mode (used in COMX), function is only active until first Q pulse
         <clock>: VIS clock speed
         <cmamaskfixed />: CMA mask fixed to 0xf independentl of number of lines. ntsc or 8 lines would normally use CMA mask 0x7 but COMX ntsc still uses 16 lines per character in memory so CMX mask is 0xf.
         <colorram type="cidelsa" />: use color ram HW as in Cidelsa
         <colorram type="tmc" />: use color ram HW as in TMC600
         <cursorblink />: activate TMC cursor blink HW
         <rotate />: rotate screen 90% as in Cidelsa
         <out type="write">: use specified output port to write to selected VIS 1870 output (as used in TMC600)
         <out type="select">: use specified output port to select VIS 1870 output port (as used in TMC600)
         <zoom>: set default zoom, when not specified 2.00 will be used
         <border>: set border size in pixels with format XxY
         <color num="x">: set color x where x=0 to 7. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color num="x" type="mask">: set color mask for color x where x=0 to 7. Color mask is used in the ctone definition which defines the different brightness levels. Color is specified as red, green, blue all 3 values should only be 0 or 255.
         <ctone num="x">: ctone brightness value for color x, should be used in combination with color mask only.
         -->

         <pagesize type="ram">0x3ff</pagesize>
         <charsize type="ram">0x7ff</charsize>
         <pcbmask>0x7f</pcbmask>
         <maxcharlines>16</maxcharlines>
         <maxscreenlines>24</maxscreenlines>
         <mode>pal</mode>
         <int>2</int>
         <ef type="display">1</ef>
         <ef type="mode">2</ef>
         <clock>5.626</clock>
         <border>2x2</border>
         <color num="0" type="mask">0,0,0</color>
         <color num="1" type="mask">0,0xFF,0</color>
         <color num="2" type="mask">0,0,0xFF</color>
         <color num="3" type="mask">0,0xFF,0xFF</color>
         <color num="4" type="mask">0xFF,0,0</color>
         <color num="5" type="mask">0xFF,0xFF,0</color>
         <color num="6" type="mask">0xFF,0,0xFF</color>
         <color num="7" type="mask">0xFF,0xFF,0xFF</color>
         <ctone num="0">0</ctone>
         <ctone num="1">28</ctone>
         <ctone num="2">77</ctone>
         <ctone num="3">105</ctone>
         <ctone num="4">150</ctone>
         <ctone num="5">194</ctone>
         <ctone num="6">227</ctone>
         <ctone num="7">255</ctone>
         <cmamaskfixed />
     </video>

     <keyboard type="ps2">
         <!-- keyboard definition for the PS2 keyboard
         <out>: output port to write data
         <in>: input port to read data
         <ef>: ef port for clock signal
         <caps>: force uppercase, leave out for normal operation
         -->

         <out>7</out>
         <in>7</in>
         <ef>3</ef>
     </keyboard>

     <keyboard type="ps2-interrupt">
         <!-- keyboard definition for the PS2 keyboard with interrupt
         <out>: output port to write data
         <in>: input port to read data
         <ef>: ef port for clock signal
         <caps>: force uppercase, leave out for normal operation
         -->

         <out>7</out>
         <in>7</in>
         <ef>3</ef>
     </keyboard>

     <keyboard type="ascii">
         <!-- keyboard definition for the ascii and hex keyboard
         <in>: input port to read data
         <ef>: ef port for data ready signal
         <caps>: force uppercase, leave out for normal operation
         -->

         <in>7</in>
         <ef>3</ef>
         <caps />
     </keyboard>

     <keyboard type="1871">
         <!-- keyboard definition for the RCA 1871 chip
         <in>: input port to read data
         <ef type="rpt">: ef port for key repeat signal
         <ef type="data">: ef port for data ready signal
         -->

         <in>3</in>
         <ef type="rpt">2</ef>
         <ef type="data">3</ef>
     </keyboard>
     
     <keyboard type="latch">
         <!-- keyboard definition for a keyboard solution using a kay latch
         <iogroup>: iogroup, i.e. i/o ports are activate when specified iogroup is selected via the iogroup port
         <out>: port to set key latch, mask HAS TO be set to max value to be able to use keyfile, ctrl V and memeory access features
         <ef pol="rev">: ef port indicating if latched key is pressed, if pol="rev" is specified ef will be reversed
         <keydef out="x">: map key latch key x value to PC key (using raw key value, i.e. shift, ctrl are NOT making any difference)
         <keydef type="text" out="x">: map key latch key x value to predefined PC key. This should be used to map shift, ctrl and alt buttons as well as a key to switch left/right alt/ctrl functions
         -->
  
         <out mask="0x3f">3</out>
         <ef pol="rev">3</ef>
                                         <!--    SHIFT -->
         <keydef out="0">48</keydef>   <!-- 0  _ -->
         <keydef out="0x1">49</keydef> <!-- 1  ! -->
         <keydef out="0x2">50</keydef> <!-- 2  " -->
         <keydef out="0x3">51</keydef> <!-- 3  # -->
         <keydef out="0x4">52</keydef> <!-- 4  $ -->
         <keydef out="0x5">53</keydef> <!-- 5  % -->
         <keydef out="0x6">54</keydef> <!-- 6  & -->
         <keydef out="0x7">55</keydef> <!-- 7  ' -->
         <keydef out="0x8">56</keydef> <!-- 8  ( -->
         <keydef out="0x9">57</keydef> <!-- 9  ) -->
         <keydef out="0xA">61</keydef> <!-- :  * (on PC =  +) -->
         <keydef out="0xB">59</keydef> <!-- ;  + -->
         <keydef out="0xC">44</keydef> <!-- ,  < -->
         <keydef out="0xD">45</keydef> <!-- -  = -->
         <keydef out="0xE">46</keydef> <!-- .  > -->
         <keydef out="0xF">47</keydef> <!-- /  ? -->
         <keydef out="0x11">65</keydef> <!-- A -->
         <keydef out="0x12">66</keydef>
         <keydef out="0x13">67</keydef>
         <keydef out="0x14">68</keydef>
         <keydef out="0x15">69</keydef>
         <keydef out="0x16">70</keydef>
         <keydef out="0x17">71</keydef>
         <keydef out="0x18">72</keydef>
         <keydef out="0x19">73</keydef>
         <keydef out="0x1A">74</keydef>
         <keydef out="0x1B">75</keydef>
         <keydef out="0x1C">76</keydef>
         <keydef out="0x1D">77</keydef>
         <keydef out="0x1E">78</keydef>
         <keydef out="0x1F">79</keydef>
         <keydef out="0x20">80</keydef>
         <keydef out="0x21">81</keydef>
         <keydef out="0x22">82</keydef>
         <keydef out="0x23">83</keydef>
         <keydef out="0x24">84</keydef>
         <keydef out="0x25">85</keydef>
         <keydef out="0x26">86</keydef>
         <keydef out="0x27">87</keydef>
         <keydef out="0x28">88</keydef>
         <keydef out="0x29">89</keydef>
         <keydef out="0x2A">90</keydef> <!-- Z -->
         <keydef out="0x2B">91</keydef> <!-- A ring (on PC [ ) -->
         <keydef out="0x2C">92</keydef> <!-- A umlaut (on PC \ ) -->
         <keydef out="0x2D">93</keydef> <!-- O umlaut  (on PC ] ) -->
         <keydef out="0x2E">96</keydef> <!-- ^  ~ (on PC `  ~ ] ) -->
         <!-- TMC BREAK not defined for this keyboard -->
         <keydef out="0x30">32</keydef> <!-- SPACE -->
         <keydef out="0x31">8</keydef> <!-- BS -->
         <keydef out="0x32">27</keydef> <!-- ESC -->
         
         <!-- TEXT definitions -->
         <keydef type="text" out="0x33">alt_right</keydef> <!-- option on Mac, alt on windows -->
         <keydef type="text" out="0x34">ctrl_left</keydef> <!-- command on Mac, ctrl on windows -->
         <keydef type="text" out="0x35">ctrl_right</keydef>
         <keydef type="text" out="0x37">alt_left</keydef>
         <keydef type="text" out="0x37">shift</keydef>
         <keydef type="text" out="0x38">caps</keydef> <!-- CAPS -->
         
         <!-- 0x39 not used -->
         <!-- TMC LINE FEED not defined for this keyboard -->
         <keydef out="0x3b">315</keydef> <!-- UP -->
         <keydef out="0x3c">316</keydef> <!-- RIGHT -->
         <keydef out="0x3d">13</keydef> <!-- RETURN -->
         <keydef out="0x3e">317</keydef> <!-- DOWN -->
         <keydef out="0x3f">314</keydef> <!-- LEFT -->

         <keydef type="text" out="9">switch</keydef> <!-- Key to switch alt/ctrl left to right -->

         <keydef out="0x11">97</keydef> <!-- a to copy a/z to AZ in ctrl V or key file -->
         <keydef out="0x12">98</keydef>
         <keydef out="0x13">99</keydef>
         <keydef out="0x14">100</keydef>
         <keydef out="0x15">101</keydef>
         <keydef out="0x16">102</keydef>
         <keydef out="0x17">103</keydef>
         <keydef out="0x18">104</keydef>
         <keydef out="0x19">105</keydef>
         <keydef out="0x1A">106</keydef>
         <keydef out="0x1B">107</keydef>
         <keydef out="0x1C">108</keydef>
         <keydef out="0x1D">109</keydef>
         <keydef out="0x1E">110</keydef>
         <keydef out="0x1F">111</keydef>
         <keydef out="0x20">112</keydef>
         <keydef out="0x21">113</keydef>
         <keydef out="0x22">114</keydef>
         <keydef out="0x23">115</keydef>
         <keydef out="0x24">116</keydef>
         <keydef out="0x25">117</keydef>
         <keydef out="0x26">118</keydef>
         <keydef out="0x27">119</keydef>
         <keydef out="0x28">120</keydef>
         <keydef out="0x29">121</keydef>
         <keydef out="0x2A">122</keydef> <!-- z -->

     </keyboard>

     <keyboard type="matrix">
          <!-- keyboard definition for a keyboard solution using a matrix with address latch (Pecom)
          <iogroup>: iogroup, i.e. i/o ports are activate when specified iogroup is selected via the iogroup port
          <in mask="0x3f" pol="rev">: port to read key address latch, mask specifies the address mask used. When using pol="rev" input bits are reversed
          <keydef type="z" address="x" bit="y">: map address latch and bit number to specified PC ASCII value. Use the type field to specify:
            1. "text" for predefined keys: return, end, home, up, down, left or right
            2. "shift" for ASCII values representing SHIFT keys on the emulated keyboard
            3. "ctrl" for ASCII values representing CTRL keys on the emulated keyboard
          <efX>: map keys to EF flag X (1 to 4) for keys: ctrl, shift, caps or esc. use pol="rev" to reverse EF value
          -->

          <iogroup>0</iogroup>
          <in mask="0x3f">3</in>
          <keydef type="ctrl" address="0x14" bit="1">1</keydef>     <!-- CTRL A -->
          <keydef type="ctrl" address="0x15" bit="0">2</keydef>
          <keydef type="ctrl" address="0x15" bit="1">3</keydef>
          <keydef type="ctrl" address="0x16" bit="0">4</keydef>
          <keydef type="ctrl" address="0x16" bit="1">5</keydef>
          <keydef type="ctrl" address="0x17" bit="0">6</keydef>
          <keydef type="ctrl" address="0x17" bit="1">7</keydef>
          <keydef type="ctrl" address="0x18" bit="0">8</keydef>
          <keydef type="ctrl" address="0x18" bit="1">9</keydef>
          <keydef type="ctrl" address="0x19" bit="0">10</keydef>
          <keydef type="ctrl" address="0x19" bit="1">11</keydef>
          <keydef type="ctrl" address="0x1A" bit="0">12</keydef>
          <keydef type="ctrl" address="0x1A" bit="1">13</keydef>
          <keydef type="ctrl" address="0x1B" bit="0">14</keydef>
          <keydef type="ctrl" address="0x1B" bit="1">15</keydef>
          <keydef type="ctrl" address="0x1C" bit="0">16</keydef>
          <keydef type="ctrl" address="0x1C" bit="1">17</keydef>
          <keydef type="ctrl" address="0x1D" bit="0">18</keydef>
          <keydef type="ctrl" address="0x1D" bit="1">19</keydef>
          <keydef type="ctrl" address="0x1E" bit="0">20</keydef>
          <keydef type="ctrl" address="0x1E" bit="1">21</keydef>
          <keydef type="ctrl" address="0x1F" bit="0">22</keydef>
          <keydef type="ctrl" address="0x1F" bit="1">23</keydef>
          <keydef type="ctrl" address="0x20" bit="0">24</keydef>
          <keydef type="ctrl" address="0x20" bit="1">25</keydef>
          <keydef type="ctrl" address="0x21" bit="0">26</keydef>    <!-- CTRL Z -->

          <keydef address="0x14" bit="0">32</keydef>               <!-- Space -->
          <keydef type="shift" address="0xc" bit="1">33</keydef>   <!-- ! -->
          <keydef type="shift" address="0xd" bit="0">34</keydef>   <!-- " -->
          <keydef type="shift" address="0xd" bit="1">35</keydef>   <!-- # -->
          <keydef type="shift" address="0xe" bit="0">36</keydef>   <!-- $ -->
          <keydef type="shift" address="0xe" bit="1">37</keydef>   <!-- % -->
          <keydef type="shift" address="0xf" bit="0">38</keydef>   <!-- & -->
          <keydef type="shift" address="0xf" bit="1">39</keydef>   <!-- ' -->
          <keydef type="shift" address="0x10" bit="0">40</keydef>  <!-- ( -->
          <keydef type="shift" address="0x10" bit="1">41</keydef>  <!-- ) -->
          <keydef type="shift" address="0x11" bit="0">42</keydef>  <!-- * -->
          <keydef type="shift" address="0x11" bit="1">43</keydef>  <!-- + -->
          <keydef address="0x12" bit="0">44</keydef>               <!-- , -->
          <keydef type="shift" address="0x12" bit="1">45</keydef>  <!-- - -->
          <keydef address="0x13" bit="0">46</keydef>               <!-- . -->
          <keydef address="0x13" bit="1">47</keydef>               <!-- / -->
          <keydef address="0xc" bit="0">48</keydef>                <!-- 0 -->
          <keydef address="0xc" bit="1">49</keydef>
          <keydef address="0xd" bit="0">50</keydef>
          <keydef address="0xd" bit="1">51</keydef>
          <keydef address="0xe" bit="0">52</keydef>
          <keydef address="0xe" bit="1">53</keydef>
          <keydef address="0xf" bit="0">54</keydef>
          <keydef address="0xf" bit="1">55</keydef>
          <keydef address="0x10" bit="0">56</keydef>
          <keydef address="0x10" bit="1">57</keydef>               <!-- 9 -->
          <keydef address="0x11" bit="0">58</keydef>               <!-- : -->
          <keydef address="0x11" bit="1">59</keydef>               <!-- ; -->
          <keydef type="shift" address="0x12" bit="0">60</keydef>  <!-- < -->
          <keydef address="0x12" bit="1">61</keydef>               <!-- = -->
          <keydef type="shift" address="0x13" bit="0">62</keydef>  <!-- > -->
          <keydef type="shift" address="0x13" bit="1">63</keydef>  <!-- ? -->

          <keydef type="shift" address="0x14" bit="1">65</keydef>  <!-- A -->
          <keydef type="shift" address="0x15" bit="0">66</keydef>
          <keydef type="shift" address="0x15" bit="1">67</keydef>
          <keydef type="shift" address="0x16" bit="0">68</keydef>
          <keydef type="shift" address="0x16" bit="1">69</keydef>
          <keydef type="shift" address="0x17" bit="0">70</keydef>
          <keydef type="shift" address="0x17" bit="1">71</keydef>
          <keydef type="shift" address="0x18" bit="0">72</keydef>
          <keydef type="shift" address="0x18" bit="1">73</keydef>
          <keydef type="shift" address="0x19" bit="0">74</keydef>
          <keydef type="shift" address="0x19" bit="1">75</keydef>
          <keydef type="shift" address="0x1A" bit="0">76</keydef>
          <keydef type="shift" address="0x1A" bit="1">77</keydef>
          <keydef type="shift" address="0x1B" bit="0">78</keydef>
          <keydef type="shift" address="0x1B" bit="1">79</keydef>
          <keydef type="shift" address="0x1C" bit="0">80</keydef>
          <keydef type="shift" address="0x1C" bit="1">81</keydef>
          <keydef type="shift" address="0x1D" bit="0">82</keydef>
          <keydef type="shift" address="0x1D" bit="1">83</keydef>
          <keydef type="shift" address="0x1E" bit="0">84</keydef>
          <keydef type="shift" address="0x1E" bit="1">85</keydef>
          <keydef type="shift" address="0x1F" bit="0">86</keydef>
          <keydef type="shift" address="0x1F" bit="1">87</keydef>
          <keydef type="shift" address="0x20" bit="0">88</keydef>
          <keydef type="shift" address="0x20" bit="1">89</keydef>
          <keydef type="shift" address="0x21" bit="0">90</keydef>  <!-- Z -->

          <keydef address="0x14" bit="1">97</keydef>               <!-- a -->
          <keydef address="0x15" bit="0">98</keydef>
          <keydef address="0x15" bit="1">99</keydef>
          <keydef address="0x16" bit="0">100</keydef>
          <keydef address="0x16" bit="1">101</keydef>
          <keydef address="0x17" bit="0">102</keydef>
          <keydef address="0x17" bit="1">103</keydef>
          <keydef address="0x18" bit="0">104</keydef>
          <keydef address="0x18" bit="1">105</keydef>
          <keydef address="0x19" bit="0">106</keydef>
          <keydef address="0x19" bit="1">107</keydef>
          <keydef address="0x1A" bit="0">108</keydef>
          <keydef address="0x1A" bit="1">109</keydef>
          <keydef address="0x1B" bit="0">110</keydef>
          <keydef address="0x1B" bit="1">111</keydef>
          <keydef address="0x1C" bit="0">112</keydef>
          <keydef address="0x1C" bit="1">113</keydef>
          <keydef address="0x1D" bit="0">114</keydef>
          <keydef address="0x1D" bit="1">115</keydef>
          <keydef address="0x1E" bit="0">116</keydef>
          <keydef address="0x1E" bit="1">117</keydef>
          <keydef address="0x1F" bit="0">118</keydef>
          <keydef address="0x1F" bit="1">119</keydef>
          <keydef address="0x20" bit="0">120</keydef>
          <keydef address="0x20" bit="1">121</keydef>
          <keydef address="0x21" bit="0">122</keydef>               <!-- z -->

          <ef1>ctrl</ef1>
          <ef2>shift</ef2>
          <ef3 pol="rev">caps</ef3>
          <ef4>esc</ef4>

          <!-- TEXT definitions -->
          <keydef type="text" address="0xa" bit="0">return</keydef>
          <keydef type="text" address="0xb" bit="0">end</keydef>
          <keydef type="text" address="0xa" bit="1">home</keydef>
          <keydef type="text" address="0x21" bit="1">down</keydef>
          <keydef type="text" address="0x22" bit="0">left</keydef>
          <keydef type="text" address="0x22" bit="1">right</keydef>
          <keydef type="text" address="0x23" bit="0">up</keydef>

     </keyboard>

     <keypad type="elf">
         <!-- keypad definition for the elf, elf 2 and super elf keypad
         <in>: input port to read data
         <ef type="ready">: ef port for data ready signal
         <ef type="in">: ef port for in button
         -->

         <in>4</in>
         <ef type="ready">3</ef>
         <ef type="in">3</ef>
     </keypad>

     <bitkeypad pad="a">
         <!-- keypad definition for a keypad using one bit per key, for pad 'a', only two pads can be defined
         <iogroup>: iogroup, i.e. i/o ports are activate when specified iogroup is selected via the iogroup port
         <bitX>: X=0 to 7 specifies ascii code for key defined on that specific bit
         <bit key="ascii">: providing the same functionality as bitX except that ascii code is specified after key= and bit number is specified as value. Note multiple bits are possible for one key by using a comma as separator: 0,1,2.
         -->

         <in>1</in>         <!-- example key definition for cidelsa altair keypad a -->
         <bit1>49</bit1>    <!-- 1 player -->
         <bit2>50</bit2>    <!-- 2 player -->
         <bit key="316">3</bit>    <!-- right -->
         <bit key="314">4</bit>    <!-- left -->
         <bit key="32">5</bit>     <!-- space / fire -->
     </bitkeypad>

     <bitkeypad pad="b">
         <in>4</in>         <!-- example key definition for cidelsa altair keypad b -->
         <bit0>315</bit0>   <!-- up -->
         <bit1>317</bit1>   <!-- down -->
         <bit2>396</bit2>   <!-- control -->
     </bitkeypad>

     <efbuttons>
         <!-- key definition connected to EF flags
         <pressed>: value ef is when a key is pressed (0 or 1)
         <efX>: X=1 to 4 specifies ascii code for key defined on that specific ef
         -->

         <pressed>0</pressed>
         <ef2>13</ef2>
         <ef3>66</ef3>
         <ef4>65</ef4>
     </efbuttons>

     <vt type="vt52" connection="serial">
         <!-- video terminal definition for a serial terminal on a VT52
         <font>: terminal binary font file
         <wav>: terminal wav file
         <dirname type="font">: location of wav (type="wav") or font (type="font") file defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         <out>: output port for terminal enable
         <ef pol="rev">: ef port for serial in, if pol="rev" is specified ef will be reversed
         <q pol="rev">: to indicate reversed q for serial out
         <baud type="receive">: specify receive baud rate; baud rate can also be changed in the GUI
         <baud type="transmit">: specif transmit baud rate; baud rate can also be changed in the GUI
         <border>: set border size in pixels with format XxY
         <color type="fore">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="back">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="high">: set highlight color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         -->

         <font>vt52.a.bin</font>
         <out>7</out>
         <ef pol="rev">3</ef>
         <q pol="rev"></q>
         <baud type="receive">19200</baud>
         <baud type="transmit">19200</baud>
         <border>0x0</border>
         <color type="fore">0, 255, 0</color>
         <color type="back">0, 0x40, 0</color>
         <color type="high">0, 0xff, 0</color>
     </vt>

     <vt type="external" connection="serial">
         <!-- video terminal definition for a serial terminal on external terminal SW
         <out>: output port for terminal enable
         <ef pol="rev">: ef port for serial in, if pol="rev" is specified ef will be reversed
         <q pol="rev">: to indicate reversed q for serial out
         <serialport>: specify PC serial port
         <baud type="receive">: specify receive baud rate; baud rate can also be changed in the GUI
         <baud type="transmit">: specif transmit baud rate; baud rate can also be changed in the GUI
         -->

         <out>7</out>
         <ef pol="rev">3</ef>
         <q pol="rev"></q>
         <serialport></serialport>
         <baud type="receive">19200</baud>
         <baud type="transmit">19200</baud>
     </vt>

     <vt type="vt100" connection="uart16450" >
         <!-- video terminal definition for a uart 16450 terminal on a VT100
         <font>: terminal binary font file
         <wav>: terminal wav file
         <dirname type="font">: location of wav (type="wav") or font (type="font") file defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         <out type="select">: output port to select uart port
         <out type="port">: output port to write uart port
         <in type="status">: input port to read status
         <in type="port">: input port to read uart port
         <baud type="receive">: specify receive baud rate; baud rate can also be changed in the GUI
         <baud type="transmit">: specif transmit baud rate; baud rate can also be changed in the GUI
         <characters>: number of characters per row (80 or 132), only supported on VT100
         <color type="fore">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="back">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="high">: set highlight color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         -->

         <font>vt100.bin</font>
         <out type="select">6</out>
         <out type="port">7</out>
         <in type="status">6</in>
         <in type="port">7</in>
         <baud type="receive">19200</baud>
         <baud type="transmit">19200</baud>
         <characters>80</characters>
         <border>0x0</border>
         <color type="fore">0, 255, 0</color>
         <color type="back">0, 0x40, 0</color>
         <color type="high">0, 0xff, 0</color>
     </vt>

     <vt type="vt100" connection="uart1854" >
         <!-- video terminal definition for a uart cdp1854 terminal on a VT100
         <font>: terminal binary font file
         <wav>: terminal wav file
         <dirname type="font">: location of wav (type="wav") or font (type="font") file defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         <out type="register">: output port to write register
         <out type="control">: output port to write control
         <in type="register">: input port to read register
         <in type="status">: input port to read status
         <baud type="receive">: specify receive baud rate; baud rate can also be changed in the GUI
         <baud type="transmit">: specif transmit baud rate; baud rate can also be changed in the GUI
         <color type="fore">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="back">: set foregorund color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="high">: set highlight color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         <color type="high">: set highlight color. Color is specified as red, green, blue all 3 values range from 0 to 255.
         -->

         <font>vt100.bin</font>
         <out type="register">2</out>
         <out type="control">3</out>
         <in type="register">2</in>
         <in type="status">3</in>
         <baud type="receive">19200</baud>
         <baud type="transmit">19200</baud>
         <characters>80</characters>
         <border>0x0</border>
         <color type="fore">0, 255, 0</color>
         <color type="back">0, 0x40, 0</color>
         <color type="high">0, 0xff, 0</color>
     </vt>

     <printer>
         <!-- basic printer definition add type="parallel", type="serial" or type="thermal" for COMX type printer cards, type="q" for a serial printer using q flag output (like for Pecom)
         <iogroup>: iogroup, i.e. i/o ports are activate when specified iogroup is selected via the iogroup port
         <out>: output port to write data to printer interface
         <in>: input port to check printer status (used for parallel, serial, thermal printer)
         <ef>: ef port for data ready flag; set to 0 or leave out if no data ready flag is used (used by basic printer)
         <ef>: ef port for printer busy flag; set to 0 or leave out if no data busy flag is used (used by thermal printer)
         <bits>: number of bits (5 to 8) used in serial printer interface
         <parity>: none, odd or even used in serial printer interface, parity errors are shown in the Tools/Configuration tab if they occur
         <filename>: initial printer filename
         <dirname>: location of printer file; defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         -->

         <out>3</out>
         <ef>0</ef>
     </printer>

     <keyfile>
         <dirname></dirname>
         <filename></filename>
     </keyfile>
     
     <videodump>
         <dirname></dirname>
         <filename></filename>
     </videodump>

     <memaccess>
         <dirname></dirname>
     </memaccess>

     <cassette decks="1">
         <!-- cassette definition for 1 or 2 tape decks
         <ef>: ef port for cassette input
         Q is always used for cassette output
         <filename>: initial cassette filename
         <dirname>: location of cassette file; defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         -->

         <ef>2</ef>
         <filename cassette="0"></filename>
     </cassette>

     <xmodem>
         <!-- activate xmodem
         <filename>: initial xmodem filename
         <dirname>: location of xmodem file; defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         -->
         <filename></filename>
     </xmodem>

     <sound type="q">
         <!-- sound definition using Q flag if defined either <hw> or <sw> should be used, not both
         <hw>: play tone with specified frequency when Q=1
         <sw>: play tone with frequency as Q flag is switched between 1/0 by the 1802 CPU
         -->

         <hw>250</hw>
         <sw />
     </sound>

     <dip>
         <!-- dip switch definition
         <in>: input port to read dip switch value
         <value>: dip switch value
         -->

         <in>2</in>
         <value>0xf</value>
     </dip>
 
     <rtc type="m48t58">
         <!-- real time clock definition for RTC chip M48T58
         <iogroup>: iogroup, i.e. i/o ports are activate when specified iogroup is selected via the iogroup port
         <control>: rtc control address location
         <second>: rtc second address location
         <minute>: rtc minute address location
         <hour>: rtc hour address location
         <day>: rtc day address location
         <date>: rtc date address location
         <month>: rtc month address location
         <year>: rtc year address location
         -->

         <iogroup>3</iogroup>
         <control>0xf3f8</control>
         <second>0xf3f9</second>
         <minute>0xf3fa</minute>
         <hour>0xf3fb</hour>
         <day>0xf3fc</day>
         <date>0xf3fd</date>
         <month>0xf3fe</month>
         <year>0xf3ff</year>
     </rtc>

     <usb type="superboard">
         <!-- COMX SuperBoad configuration and simpulation
         -->

         <iogroup>3</iogroup>
         <out q="0">2</out>
         <in type="usb">5</in>
         <in type="ef">6</in>
         <ef>4</ef>
     </usb>

     <locations>
         <!-- Locations is used to define certain triggers to the emulator based on execution address and optionally specific values in one or multiple memeory locations
         -->

         <!-- used to detect if emulated computer is waiting for key input in paste, Key File, memory accesss RUN functions
         0x1bc: COMX wait for key on reset screen
         0x39a: COMX wait for key in BASIC
         0x5344: COMX wait for key in F&M BASIC
         0xc10c: COMX wait for key when using 80 column card
         0xeeb5: COMX wait for key in BASIC SB / F&M EPROM BOARD
         -->
         <key_input>0x1bc, 0x39a, 0x5344</key_input>
         
         <!-- Machine states: used to detect if running machine is in reset. BASIC or RUNNING program used in memory access function. Examples below are for COMX.
         address= and value= specify one or multiple address locations with values. If these match in memory the trigger is active, if not it is skipped. In example below address 0x42a0 should contain 0 otherwise BASIC state will not be identified.
         -->
         <reset_state>0x1bc</reset_state>
         <basic_state address="0x42a0" value="0">0x39a, 0x5344</basic_state>
         <run_state>0x1f76, 0x2c00</run_state>

         <!-- Stop thermal printer output: trigger to stop COMX thermal printer output on COMX READY prompt -->
         <stop_thermal address="0x428b" value="0x14">0x1047</stop_thermal>
         
         <!-- Stop cassette: trigger to stop COMX cassett load or save on COMX READY prompt -->
         <stop_cas>0x1047</stop_cas>
         
         <!-- Start PSAVE, DSAVE, PLOAD, DLOAD: used for automatic tape start/stop, load will clear any loaded filename shown in the emulated window, dload will not. -->
         <start_cas_save>0x1672, 0x1675</start_cas_save>
         <start_cas_load>0x0e00</start_cas_load>
         <start_cas_dload>0x0e03</start_cas_dload>

         <!-- Start F&M BASIC BSAVE, BLOAD: used for automatic tape start/stop -->
         <start_cas_save address="0x428b" value="0x53">0x4dc3</start_cas_save>
         <start_cas_load address="0x428b" value="0x53">0x4daa</start_cas_load>

         <!-- Start TURBO PSAVE/PLOAD V1.00: used for automatic tape start/stop -->
         <start_cas_save address="0xbfd0, 0xbfd1, 0xbf02, 0xbfac" value="0x54, 0x41, 0xc3, 0x91">0xbf00</start_cas_save>
         <start_cas_load address="0xbfd0, 0xbfd1, 0xbf02, 0xbfac" value="0x54, 0x41, 0xc3, 0x91">0xbf70</start_cas_load>

         <!-- Start TURBO PSAVE/PLOAD V2.00: used for automatic tape start/stop -->
         <start_cas_save address="0xbfe3, 0xbfe4, 0xbe93, 0xbe94" value="0x54, 0x41, 0x4c, 0x4f">0xbee7</start_cas_save>
         <start_cas_load address="0xbfe3, 0xbfe4, 0xbe93, 0xbe94" value="0x54, 0x41, 0x4c, 0x4f">0xbf78</start_cas_load>

         <!-- Start TOS V2.00: used for automatic tape start/stop -->
         <start_cas_save address="0xbd52, 0xbd53, 0xb934, 0xb935" value="0x54, 0x4f, 0x3a, 0xb6">0xbae7, 0xbce1</start_cas_save>
         <start_cas_load address="0xbd52, 0xbd53, 0xb934, 0xb935" value="0x54, 0x4f, 0x3a, 0xb6">0xbb78</start_cas_load>
         <start_cas_dload address="0xbd52, 0xbd53, 0xb934, 0xb935" value="0x54, 0x4f, 0x3a, 0xb6">0xbcf4</start_cas_dload>
         
         <!-- Start Printer ROM PSAVE/DSAVE/PLOAD/DLOAD/+: used for automatic tape start/stop  -->
         <start_cas_save address="0xc001" value="0x1">0xcbe2, 0xcde2, 0xccb1, 0xceb1</start_cas_save>
         <start_cas_load address="0xc001" value="0x1">0xcc41, 0xce41</start_cas_load>
         <start_cas_dload address="0xc001" value="0x1">0xcd00, 0xcf00</start_cas_dload>

         <!-- Start SB TSAVE/DTSAVETLOAD/DTLOAD: used for automatic tape start/stop -->
         <start_cas_save address="0xc002" value="0x70">0xdea0, 0xdea3</start_cas_save>
         <start_cas_load address="0xc002" value="0x70">0xdea6</start_cas_load>
         <start_cas_dload address="0xc002" value="0x70">0xdea9</start_cas_dload>
         
         <!-- Set DOS Filenam end DOS command: used to show loaded filename in emulated window -->
         <set_dos_filename address="0xc001, 0x42d2, 0x42d4, 0x42d6, 0x42d8" value="0x3, 0x4c, 0x4f, 0x41, 0x44">0xd527</set_dos_filename>
         <set_dos_filename address="0xc001, 0x42d2, 0x42d4, 0x42d6, 0x42d8" value="0x3, 0x4c, 0x4f, 0x41, 0x44">0xd527</set_dos_filename>

         <!-- Set DOS Filenam end DOS RUN command: used to show loaded filename in emulated window -->
         <set_dos_filename address="0xc001, 0x42d2, 0x42d3" value="0x3, 0xc2, 0xcf">0xcda1</set_dos_filename>
         
         <!-- Set DOS Filenam end DOS URUN command: used to show loaded filename in emulated window -->
         <set_dos_filename address="0xc001, 0x42d2, 0x42d3" value="0x3, 0x55, 0x83">0xdec9</set_dos_filename>

         <!-- Save start/end during batch conversion -->
         <batch_end_save>0x14e1</batch_end_save>
         <batch_end_save>0x14e1</batch_end_save>

         <!-- Correct CAPS state on startup (after C/W message has been answered for TMC-600)
         this works and it might be more logic but at the same time it means CAPS should be
         pressed before any commands can be given. -->
         <!-- <correct_caps>0x134</correct_caps> -->

     </locations>
     
     <basic>
         <!-- info and BASIC address locations used in memory access functions as well as tape loading.
         <pload>: pload file extension, in example below .comx
         <defus>: location of high byte of DEFUS address which defines the user space or memory
         <eop>: location of high byte of End of Program
         <string>: location of high byte of String storage location
         <string>: location of high byte of Array storage location
         <eod>: location of high byte of End of Data
         <ram>: exact start of user RAM
         -->
         
         <pload>comx</pload>
         <defus>0x4281</defus>
         <eop>0x4283</eop>
         <string>0x4292</string>
         <>0x4294</array>
         <eod>0x4299</eod>
         <ram>0x4400</ram>
     </basic>

     <batchwav>
         <!-- Batchwav activates batch features for conversion to .wav format, only working on a COMX and when running Super BASIC. To activate batch save Location triggers <batch_start_save> and <batch_end_save> need to be defined (see <locations>)
         <command>: BASIC save command
         <dirname>: location of batch files; defined as sub-dir of the main Emma 02 data directory. If not specified the dirname specified in <system> will be used.
         -->

         <command>psave</command>
     </batchwav>
     
     <diagnostic>
         <!-- Settings to activate the COMX diagnostic board
         <in type="1">: Diagnostic board input port 1
         <in type="2">: Diagnostic board input port 2
         <out>: Diagnostic output port
         <checksum>: set checksum function on or off
         <factory>: set factory unit to yes or no, when selected additional repeat & debounce tests as well as IDEN tests are executred
         <cassette>: connected or disconnected cables
         -->

         <in type="1">1</in>
         <in type="2">2</in>
         <out>1</out>
         <checksum>on</checksum>         <!-- on / off -->
         <factory>yes</factory>          <!-- yes / no -->
         <cassette>connected</cassette>  <!-- connected / disconnected -->
     </diagnostic>
             
</emmaconfig>
