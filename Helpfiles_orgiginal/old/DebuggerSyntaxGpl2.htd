<html>
<title>GPL-2 Syntax</title>
<body>
<h1>GPL-2 Syntax</h1>
<h2>Information</h2>
<p>
I can't be sure this pseudo command syntax is indeed called GPL-2, however I do expect GPL was used for all language variants for the RCA Video Coin Arcade machine and FPL for the FRED 1.5. Mainly based on the FPL-4 and GPL-4 which both are running the Coin and Computer bowling games on both the Arcade and FRED machine. As this version is running the 'Swords' games and FPL-2 is running 'Curses Foiled Again', i.e. the Swords game I have taken the liberty to call this GPL-2. If you have any proof that this is incorrect please let me know.
</p>
<p>
GPL-2 is used in the games 'Swords', 'Touche !!', 'En Garde !!', 'Chase', 'Mines 1', 'Mines 2' and 'Kaleidoscope'. All running on the RCA Video Coin Arcade machine. 
</p>
<p>
V0-F are stored on memory locations 0800-080F.
</p>
<p>
This info is also available online on the <a href="https://emma02.hobby-site.com/pseudo_gpl-2.html">Emma 02 site</a>.
</p>
<h2>Definitions</h2>
<table>
<TR>
<TD WIDTH="70">aaa</TD>
<TD WIDTH="400">12 bit address</TD>
</TR>
<TR>
<TD WIDTH="70">kk</TD>
<TD WIDTH="400">8 bit constant</TD>
</TR>
<TR>
<TD WIDTH="70">n</TD>
<TD WIDTH="400">4 bit constant</TD>
</TR>
<TR>
<TD WIDTH="70">o</TD>
<TD WIDTH="400">4 bit constant with value 8-F</TD>
</TR>
<TR>
<TD WIDTH="70">p</TD>
<TD WIDTH="400">4 bit constant with value 0-7</TD>
</TR>
<TR>
<TD WIDTH="70">x</TD>
<TD WIDTH="400">Register number Vx (x = 0 to F)</TD>
</TR>
<TR>
<TD WIDTH="70">y</TD>
<TD WIDTH="400">Register number Vy (y = 0 to F)</TD>
</TR>
<TR>
<TD WIDTH="70">z</TD>
<TD WIDTH="400">Register number Vz (y = 0 to F)</TD>
</TR>
<TR>
<TD WIDTH="70">.</TD>
<TD WIDTH="400">Not used, value doesn't matter</TD>
</TR>
<TR>
<TD WIDTH="70">1..9, A..F</TD>
<TD WIDTH="400">Hexadecimal digits</TD>
</TR>
</table>
<h2>Syntax</h2>
<table>
<TR>
<TD WIDTH="55">5xyz</TD>
<TD WIDTH="40">ADD</TD>
<TD WIDTH="100">Vz, Vx+Vy</TD>
<TD WIDTH="250">Vz = Vx + Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">5xyx</TD>
<TD WIDTH="40">ADD</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx + Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">9xyz</TD>
<TD WIDTH="40">AND</TD>
<TD WIDTH="100">Vz, Vx&amp;Vy</TD>
<TD WIDTH="250">Vz = Vx AND Vy</TD>
</TR>
<TR>
<TD WIDTH="55">9xyx</TD>
<TD WIDTH="40">AND</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx AND Vy</TD>
</TR>
<TR>
<TD WIDTH="55">2aaa</TD>
<TD WIDTH="40">CALL</TD>
<TD WIDTH="100">aaa</TD>
<TD WIDTH="250">Call subroutine at aaa. The subroutine must end in 30 (which is the 'GPL-2' equivalent of RETURN). Note only 1 level call is allowed as return address is stored in R9</TD>
</TR>
<TR>
<TD WIDTH="55">A0</TD>
<TD WIDTH="40">CLS</TD>
<TD WIDTH="100"></TD>
<TD WIDTH="250">Clear display</TD>
</TR>
<TR>
<TD WIDTH="55">80kk</TD>
<TD WIDTH="40">DELAY</TD>
<TD WIDTH="100">kk</TD>
<TD WIDTH="250">Delay of value kk</TD>
</TR>
<TR>
<TD WIDTH="55">A1yz</TD>
<TD WIDTH="40">DRW</TD>
<TD WIDTH="100">Vx, Vz</TD>
<TD WIDTH="250">Draw 4*8 pattern in Vy on screen position Vz. Shapes of pattern fetched from shape table at 0423.
</TD>
</TR>
<TR>
<TD WIDTH="55">A2yz</TD>
<TD WIDTH="40">DRW</TD>
<TD WIDTH="100">Vx/Vy, Vz</TD>
<TD WIDTH="250">Draw 4*8 patterns from the pattern table starting at location VxVy (Vy=Vx+1), end of pattern table should be hex ff, drawing on screen position Vz. 
</TD>
</TR>
<TR>
<TD WIDTH="55">A3yz</TD>
<TD WIDTH="40">DRW</TD>
<TD WIDTH="100">B, Vy, Vz</TD>
<TD WIDTH="250">Draw 4*8 BCD value of Vy to screen. If Vz contains hex A draw on bottom left otherwise draw on right of the screen. Value is extended with two zeros, i.e. 5 digits.
</TD>
</TR>
<TR>
<TD WIDTH="55">Cxkk</TD>
<TD WIDTH="40">DRW</TD>
<TD WIDTH="100">D, Vx, kk</TD>
<TD WIDTH="250">Used in Chase only, x != 0. Draw 5 dots on screen position kk+y, value y is added from table on 44D, dots are drawn based on if bit 0 to 4 in Vx are 0 or 1. Note bit 4 should always be '1'. This is used to draw the cursor keys at the start with fire flashing
</TD>
</TR>
<TR>
<TD WIDTH="55">0aaa</TD>
<TD WIDTH="40">JZ</TD>
<TD WIDTH="100">V0, aaa</TD>
<TD WIDTH="250">Jump to aaa if V0 = 0</TD>
</TR>
<TR>
<TD WIDTH="55">1aaa</TD>
<TD WIDTH="40">JNZ</TD>
<TD WIDTH="100">V0, aaa</TD>
<TD WIDTH="250">Jump to aaa if V0 != 0</TD>
</TR>
<TR>
<TD WIDTH="55">31kk</TD>
<TD WIDTH="40">JP</TD>
<TD WIDTH="100">FIREA, kk<br>'EF1', kk</TD>
<TD WIDTH="250">If EF1 jump to address kk in current page (i.e JP on FIRE A)</TD>
</TR>
<TR>
<TD WIDTH="55">32kk</TD>
<TD WIDTH="40">JP</TD>
<TD WIDTH="100">'EF2', kk</TD>
<TD WIDTH="250">If EF2 jump to address kk in current page</TD>
</TR>
<TR>
<TD WIDTH="55">33kk</TD>
<TD WIDTH="40">JP</TD>
<TD WIDTH="100">FIREB, kk<br>'EF3', kk</TD>
<TD WIDTH="250">If EF3 jump to address kk in current page (i.e JP on FIRE B)</TD>
</TR>
<TR>
<TD WIDTH="55">34kk</TD>
<TD WIDTH="40">JP</TD>
<TD WIDTH="100">COIN, kk<br>'EF4', kk</TD>
<TD WIDTH="250">If EF4 jump to address kk in current page (i.e JP on COIN).</TD>
</TR>
<TR>
<TD WIDTH="55">C.yz</TD>
<TD WIDTH="40">KEY</TD>
<TD WIDTH="100">Vy, Vz</TD>
<TD WIDTH="250">Vy = direction key pad A, Vz = direction key pad B. If RF = 0, jump to 'end game'</TD>
</TR>
<TR>
<TD WIDTH="55">8aaa</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">RE, aaa</TD>
<TD WIDTH="250">RE = 0aaa, except for 80kk instruction</TD>
</TR>
<TR>
<TD WIDTH="55">5xyz</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vz, Vx+Vy</TD>
<TD WIDTH="250">Same as ADD: Vz = Vx + Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">6xyz</TD>
<TD WIDTH="40">LD</TD>
<TD WIDTH="100">Vz, Vx-Vy</TD>
<TD WIDTH="250">Same as SUB: Vz = Vx - Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">30</TD>
<TD WIDTH="40">RETURN</TD>
<TD WIDTH="100"></TD>
<TD WIDTH="250">Return from CALL by restoring R9 to PC (R5)</TD>
</TR>
<TR>
<TD WIDTH="55">Fxkk</TD>
<TD WIDTH="40">RND</TD>
<TD WIDTH="100">Vx, kk</TD>
<TD WIDTH="250">Vx = random AND kk</TD>
</TR>
<TR>
<TD WIDTH="55">A0</TD>
<TD WIDTH="40">SCR</TD>
<TD WIDTH="100">CLS</TD>
<TD WIDTH="250">Clear display</TD>
</TR>
<TR>
<TD WIDTH="55">AF</TD>
<TD WIDTH="40">SCR</TD>
<TD WIDTH="100">XOR</TD>
<TD WIDTH="250">XOR screen content with hex FF</TD>
</TR>
<TR>
<TD WIDTH="55">Expq</TD>
<TD WIDTH="40">SP</TD>
<TD WIDTH="100">C, n, z</TD>
<TD WIDTH="250">Copy sprite table from n to z, first two and last byte are fetched from 7C0 table (p=n, q=z, both 0-7). Code for this command is available in all games but the table at 7C0 is only defined for the Chase and Mines 1/2 games, command is not actually used or working in the other games.<br>Sprite commands use a sprite definition table with 5 locations per sprites and 8 sprites (0-7). Starting at address 840.<br>
Pos 0: not sure what this is for<br>
Pos 1: Vertical offset<br>
Pos 2: Horizontal offset<br>
Pos 3: Start position last sprite<br>
Pos 4: Sprite pattern location; i.e. reference to sprite pattern table on 7kk. First byte on that table: low nibble is number of lines, high byte is width in bytes</TD>
</TR>
<TR>
<TD WIDTH="55">Dokk</TD>
<TD WIDTH="40">SP</TD>
<TD WIDTH="100">D, n, kk</TD>
<TD WIDTH="250">DRW sprite n from 7kk (o=n+8)</TD>
</TR>
<TR>
<TD WIDTH="55">Dpkk</TD>
<TD WIDTH="40">SP</TD>
<TD WIDTH="100">D, n, Vy, Vz</TD>
<TD WIDTH="250">Draw sprite n, Vy will be stored on first location of sprite definition table, Vz on the vertical offset. Meaning the sprite will be drawn Vz lines lower than the last sprite n. The next instruction will be skipped if there is no sprite collision (p=n)</TD>
</TR>
<TR>
<TD WIDTH="55">Bokk</TD>
<TD WIDTH="40">SP</TD>
<TD WIDTH="100">O, n, kk</TD>
<TD WIDTH="250">SPrite Offset for sprite n (0-7): vertical = 0 and horizontal = kk (o=n+8)</TD>
</TR>
<TR>
<TD WIDTH="55">Bpkk</TD>
<TD WIDTH="40">SP</TD>
<TD WIDTH="100">P, n, kk</TD>
<TD WIDTH="250">SPrite Patern location for sprite n (0-7) = 7kk (p=n)</TD>
</TR>
<TR>
<TD WIDTH="55">E0pz</TD>
<TD WIDTH="40">SP</TD>
<TD WIDTH="100">Vz, P, n</TD>
<TD WIDTH="250">Vz = Sprite pattern location (p=n)</TD>
</TR>
<TR>
<TD WIDTH="55">6xyz</TD>
<TD WIDTH="40">SUB</TD>
<TD WIDTH="100">Vz, Vx-Vy</TD>
<TD WIDTH="250">Vz = Vx - Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">6xyx</TD>
<TD WIDTH="40">SUB</TD>
<TD WIDTH="100">Vx, Vy</TD>
<TD WIDTH="250">Vx = Vx - Vy, V0 = carry</TD>
</TR>
<TR>
<TD WIDTH="55">7aaa</TD>
<TD WIDTH="40">SYS</TD>
<TD WIDTH="100">aaa</TD>
<TD WIDTH="250">Call CDP1801 code at aaa. The subroutine must end in a RET (D4). Most games include 2 routines. One to check bit 0/1 from PAR and return value in RF which is likely used for game end score check (the higher RF the higher the end score). A second routine will skip next instruction if test mode is not active (INP5 != 8), the next instruction is a jump to address hex A00, this will cause a crash as no 'test ROM' is loaded at that location!</TD>
</TR>
</table>
</body>
</html>


