
<html>
<title>SYSTEM00 Syntax</title>
<body>
<h1>SYSTEM00 Syntax</h1>
<h2>Information</h2>
<p>
This is the only 'CPU' in Emma 02 which is not a CPU from the 180x series. Instead it is using a chip set as was used in the RCA SYSTEM00 prototype. The SYSTEM00 chip set is likely constructed largely of 7400-series TTL logic, i.e. not a microprocessor. For more details on the SYSTEM00 see also Herb Johnson's page <a href="http://www.retrotechnology.com/memship/sys00_insp.html">System 00 inspection</a>. The instruction set uses a subset of the 1801 with some incompatible differences and is likely what the 1801 was based on. An overview of all difference between the SYSTEM00, <a href="DebuggerSyntax1801.htm">CDP1801</a> and <a href="DebuggerSyntax1802.htm">CDP1802</a> can be found on the <a href="DebuggerSyntaxDifferences.htm">differences</a> page.
</p>
<p>
This info is also available online on the <a href="https://emma02.hobby-site.com/system00.html">Emma 02 site</a>.
</p>
<h2>Definitions</h2>
<table>
<tbody>
<tr>
<td>xx</td>
<td>8 bit value</td>
</tr>
<tr>
<td>RN</td>
<td>Register number N (N = 0 to F), RN can also be represented as N in all commands</td>
</tr>
<tr>
<td>RX</td>
<td>Stack or data pointer register</td>
</tr>
<tr>
<td>RP</td>
<td>Program counter register</td>
</tr>
<tr>
<td>RN.0, RX.0 or RP.0</td>
<td>Lower order byte or RN, RX or RP</td>
</tr>
<tr>
<td>RN.00</td>
<td>Lower order nibble or RN.0</td>
</tr>
<tr>
<td>RN.1, RX.1 or RP.1</td>
<td>Higher order byte or RN, RX or RP</td>
</tr>
<tr>
<td>D0</td>
<td>Lower order nibble or D</td>
</tr>
<tr>
<td>M(RN)->D; RN+1->RN</td>
<td>This notation means: The memory byte pointed to by RN is loaded into D, and RN is incremented by 1.</td>
</tr>
</tbody>
</table>
<h2>Syntax</h2>
<table>
<tbody>
<tr>
<td><B>INSTRUCTION</B></td>
<td><B>MNEMONIC</B></td>
<td><B>OP CODE</B></td>
<td><B>OPERATION</B></td>
</tr>
<tr>
<td><B>MEMORY REFERENCE</B></td>
</tr>
<tr>
<td>LOAD ADVANCE</td>
<td>LDA RN</td>
<td>4N</td>
<td>M(RN)->D; RN+1->RN</td>
</tr>
<tr>
<td>LOAD VIA X</td>
<td>LDX</td>
<td>F0</td>
<td>M(RX)->D</td>
</tr>
<tr>
<td>STORE VIA N</td>
<td>STR</td>
<td>5N</td>
<td>D->M(RN)</td>
</tr>
<tr>
<td><B>REGISTER OPERATIONS</B></td>
</tr>
<tr>
<td>INCREMENT REG N</td>
<td>INC RN</td>
<td>1N</td>
<td>RN+1->RN</td>
</tr>
<tr>
<td>DECREMENT REG N</td>
<td>DEC RN</td>
<td>2N</td>
<td>RN-1->RN</td>
</tr>
<tr>
<td>GET LOW REG N</td>
<td>GLO RN</td>
<td>8N</td>
<td>RN.0->D</td>
</tr>
<tr>
<td>PUT LOW REG N</td>
<td>PLO RN</td>
<td>AN</td>
<td>D->RN.0</td>
</tr>
<tr>
<td>GET HIGH REG N</td>
<td>GHI RN</td>
<td>9N</td>
<td>RN.1->D</td>
</tr>
<tr>
<td>PUT HIGH REG N</td>
<td>PHI RN</td>
<td>BN</td>
<td>D->RN.1</td>
</tr>
<tr>
<td>PUT NIBBLE REG N</td>
<td>PNI RN</td>
<td>CN</td>
<td>D0->RN.00</td>
</tr>
<tr>
<td><B>LOGIC OPERATIONS</B></td>
</tr>
<tr>
<td>OR</td>
<td>OR</td>
<td>F1</td>
<td>M(RX) OR D->D</td>
</tr>
<tr>
<td>EXCLUSIVE OR</td>
<td>XOR</td>
<td>F3</td>
<td>M(RX) XOR D->D</td>
</tr>
<tr>
<td>AND</td>
<td>AND</td>
<td>F2</td>
<td>M(RX) AND D->D</td>
</tr>
<tr>
<td>SHIFT RIGHT</td>
<td>SHR</td>
<td>F6</td>
<td>SHIFT D RIGHT, LSB(D)->DF, 0->MSB(D)</td>
</tr>
<tr>
<td><B>ARITHMETIC OPERATIONS</B></td>
</tr>
<tr>
<td>ADD</td>
<td>ADD</td>
<td>F4</td>
<td>M(RX)+D->DF, D</td>
</tr>
<tr>
<td>SUBtrACT D</td>
<td>SD</td>
<td>F5</td>
<td>M(RX)-D->DF, D</td>
</tr>
<tr>
<td><B>BRANCH INSTRUCTIONS-SHORT BRANCH</B></td>
</tr>
<tr>
<td>SHORT BRANCH</td>
<td>BR xx</td>
<td>30</td>
<td>M(RP)->RP.0</td>
</tr>
<tr>
<td>SHORT BRANCH IF D NOT 0</td>
<td>BNZ xx</td>
<td>31</td>
<td>IF D NOT 0, M(RP)->RP.0, ELSE RP+1->RP</td>
</tr>
<tr>
<td>SHORT BRANCH IF D=0</td>
<td>BZ xx</td>
<td>32</td>
<td>IF D=0, M(RP)->RP.0, ELSE RP+1->RP</td>
</tr>
<tr>
<td>SHORT BRANCH IF DF=1</td>
<td>BDF xx</td>
<td>33</td>
<td>IF DF=1, M(RP)->RP.0, ELSE RP+1->RP</td>
</tr>
<tr>
<td>SHORT BRANCH IF POS OR ZERO</td>
<td>BPZ xx</td>
<td>33</td>
<td>IF DF=1, M(RP)->RP.0, ELSE RP+1->RP</td>
</tr>
<tr>
<td>SHORT BRANCH IF GREATER OR EQUAL</td>
<td>BGE xx</td>
<td>33</td>
<td>IF DF=1, M(RP)->RP.0, ELSE RP+1->RP</td>
</tr>
<tr>
<td>SHORT BRANCH IF EF1=1</td>
<td>B1 xx</td>
<td>34</td>
<td>IF EF1=1, M(RP)->RP.0, ELSE RP+1->RP</td>
</tr>
<tr>
<td>SHORT BRANCH IF EF2=1</td>
<td>B2 xx</td>
<td>35</td>
<td>IF EF2=1, M(RP)->RP.0, ELSE RP+1->RP</td>
</tr>
<tr>
<td>SHORT BRANCH IF EF3=1</td>
<td>B3 xx</td>
<td>36</td>
<td>IF EF3=1, M(RP)->RP.0, ELSE RP+1->RP</td>
</tr>
<tr>
<td>SHORT BRANCH IF EF4=1</td>
<td>B4 xx</td>
<td>37</td>
<td>IF EF4=1, M(RP)->RP.0, ELSE RP+1->RP</td>
</tr>
<tr>
<td><B>CONTROL INSTRUCTIONS</B></td>
</tr>
<tr>
<td>IDLE RN</td>
<td>IDL RN</td>
<td>0N</td>
<td>WAIT FOR DMA OR INTERRUPT; M(RN)->LEDs</td>
</tr>
<tr>
<td>SET P</td>
<td>SEP RN</td>
<td>DN</td>
<td>N->P</td>
</tr>
<tr>
<td>SET X</td>
<td>SEX RN</td>
<td>EN</td>
<td>N->X</td>
</tr>
<tr>
<td>SAVE</td>
<td>SAV</td>
<td>78</td>
<td>T->M(RX)</td>
</tr>
<tr>
<td>RETURN</td>
<td>RET</td>
<td>70</td>
<td>M(RX)->(X, P); RX+1->RX, 1->lE</td>
</tr>
<tr>
<td><B>INPUT-OUTPUT BYTE TRANSFER</B></td>
</tr>
<tr>
<td>OUTPUT 1</td>
<td>OUT 1</td>
<td>61</td>
<td>M(RX)->BUS; RX+1->RX; N LINES=1</td>
</tr>
<tr>
<td>OUTPUT 2</td>
<td>OUT 2</td>
<td>62</td>
<td>M(RX)->BUS; RX+1->RX; N LINES=2, </td>
</tr>
<tr>
<td>OUTPUT 3</td>
<td>OUT 3</td>
<td>63</td>
<td>M(RX)->BUS; RX+1->RX; N LINES=3</td>
</tr>
<tr>
<td>INPUT 0</td>
<td>INP 0</td>
<td>68</td>
<td>BUS->M(RX); BUS->D; N LINES=1</td>
</tr>
</tbody>
</table>	
</body>
</html>